// Copyright 2015-2023 The Khronos Group Inc.
// SPDX-License-Identifier: CC-BY-4.0  

[[extensions]]
= API Versions, Extensions, and Layers

This chapter describes required and recommended processes for writing
specification language for different core API versions, extensions, and API
layers.
It is concerned with processes and registration, while fine-grained naming
conventions are included in the <<naming,API Naming Conventions chapter>>.

[NOTE]
.Note
====
The mechanism and process of specifying extensions is subject to change, as
we receive feedback from authors and further requirements of documentation
tooling.
This document will be updated as changes are made.
====


== Introduction

The Khronos extension registries and extension naming conventions serve
several purposes:

  * Avoiding naming collisions between extensions developed by mutually
    unaware parties, both in the extension names themselves, as well as
    their token, command, and type names.
  * Allocating enumerant values for tokens added by extensions
  * Creating a defined order between extensions.
    Extensions with higher numbers may have dependencies upon extensions
    with lower numbers, and must define any relevant interactions with
    lower-numbered extensions.
  * Provides a central repository for documentation and header changes
    associated with extensions


[[extensions-rules]]
== General Rules/Guidelines

Some general rules to simplify the specific rules below:

  * API versions and extensions must each have a globally unique name.
  * All commands and tokens must have a globally unique name.
  * API versions and extensions can expose new commands, types, and/or
    tokens.
  * All extensions must be registered with Khronos.
  * Extensions in general are strictly additive and backwards-compatible
    with each other and with the core API.
    However, explicit incompatibilities may exist and must be documented.


[[extensions-naming-conventions]]
== Version and Extension Naming Conventions

Versions and extensions have formal _names_.
These names are used in a variety of places:

  * When specifying extensions to enable in the API.
  * As a preprocessor symbol in the `anari.h` header file indicating
    that an extension interface is defined at compile time.
  * To control building the ANARI Specification from asciidoctor source
    containing multiple versions and extensions, by explicitly enabling
    their inclusion.

[NOTE]
.Note
====
Published extensions are documented as part of the `main` branch of the
KhronosGroup/ANARI gitlab project.
They can optionally be included or excluded when generating specifications.
====

There is a rigid syntax for these names:

  * Versions are named with the syntax `ANARI_VERSION_<major>_<minor>`.
  * Extensions are named with the syntax `ANARI_<author>_<name>`.

All these names include a `ANARI_` prefix, as described in the
<<naming-preprocessor,Preprocessor Defines>> section above.

All these names must be valid C language identifiers.


[[extensions-naming-conventions-name-strings]]
=== Version and Extension Name Strings

The `<name>` portion of version and extension names is a concise name
describing its purpose or functionality.
The underscore (`_`) character is used as a delimiter between words.
Every alphabetic character of the name must be in lower case.


[[extensions-naming-author-IDs]]
=== Author IDs for Extensions

Extension names also contain an _author ID_, indicated by
`<author>` above, identifying the author of the extension.
This ID is a short, capitalized string identifying an author, such as a
Khronos member developing ANARI implementations for their devices.
Author IDs must be registered with Khronos.

Some authors have platform communities they wish to distinguish between, and
can register additional author IDs for that purpose.
For example, Google has separate Android and Chrome communities.

Details on how to register an author ID are provided below.

  * The following are examples of extension names, demonstrating
    the above syntax:
  ** Extension names all use the base prefix `ANARI_`.
  ** Khronos-ratified extensions add the reserved author ID `KHR` and use
     the prefix `ANARI_KHR_`.
  ** The following author IDs are reserved and must not be used:
  *** `AN` - To avoid confusion with the top-level AN_ prefix.
  *** `ANARI` - To avoid confusion with the top-level `ANARI_` prefix and ANARI API.
  *** `KHRONOS` - To avoid confusion with the Khronos organization.
  ** Multi-author extensions that have not been ratified by Khronos (those
     developed via cooperation between, and intended to be supported by two
     or more registered authors) add the special author ID `EXT` to the base
     prefix, and will use the prefix `ANARI_EXT_`.
  ** Traditional author-specific extensions developed by one author (or one
     author in cooperation with non-authors) add the author ID to the base
     prefix.
     For example, NVIDIA will use the prefix `ANARI_NV_`, and Valve will use
     the prefix `ANARI_VALVE_`.
     Some authors can have additional registered author IDs for special
     purposes.
     For example, an Android extension developed by Google - but part of an
     Android open-source community project, and so not a proprietary Google
     extension - will use the author ID `ANDROID`.

[source, c]
.Example
----
// Core API version name for ANARI 1.1
ANARI_VERSION_1_1

// Khronos extension name
ANARI_KHR_mirror_clamp_to_edge

// Multivendor extension name
ANARI_EXT_debug_marker

// Vendor extension name using author ID NV
ANARI_NV_glsl_shader
----


[[extensions-naming]]
== Extension Command, Type, and Token Naming Conventions

Extensions may add new commands, types, and tokens, or collectively
"`objects`", to the ANARI API.
These objects are given globally unique names by appending the author ID
defined above for the extension name as described in the
<<naming-extension-identifiers, Extension Identifier Naming Conventions>>
section above.


[[extensions-api-registry]]
== The ANARI Registry

The canonical definition of the ANARI APIs is kept in an XML file known as
the *ANARI registry*.
The registry is kept in `docs/xml/an.xml` in the `main` branch of the
KhronosGroup/ANARI project, containing the most
recently released ANARI API specification.
The registry contains reserved author IDs, core and extension interface
definitions, definitions of individual commands and structures, and other
information which must be agreed on by all implementations.
The registry is used to maintain a single, consistent global namespace for
the registered entities, to generate the Khronos-supplied ANARI header
files, and to create a variety of related documentation used in generating
the API specification and reference pages.
Other uses of the registry outside Khronos include a variety of language bindings. 


[[extensions-author-ID]]
== Registering an Author ID with Khronos

Previous Khronos APIs could only officially be modified by Khronos members.
In an effort to build a more flexible platform, ANARI allows non-Khronos
developers to extend and modify the API via extensions in the
same manner as Khronos members.
However, extensions must still be registered with Khronos.
A mechanism for non-members to register extensions is provided.

Extension authors will be able to create an account on GitHub and register
an author ID with Khronos through the
KhronosGroup/ANARI project.
The author ID must be used for any extensions that author registers.
The same mechanism will be used to request registration of extensions
with Khronos, as described below.

To reserve an author ID, propose a merge request against
<<extensions-api-registry,`an.xml`>> in the `main` branch.
The merge must add a `<tag>` XML tag and fill in the `name`, `author` and
`contact` attributes with the requested author ID, the author's formal name
(e.g. company or project name), and contact email address, respectively.
The author ID will only be reserved once this merge request is accepted.

Please do not try to reserve author IDs which clearly belong to another
existing company or project which may wish to develop ANARI extensions or
layers in the future, as a matter of courtesy and respect.
Khronos may decline to register author IDs that are not requested in good
faith.


[[extensions-vendor-id]]
== Registering a Vendor ID with Khronos

Khronos vendor IDs are reserved in a similar fashion to
<<extensions-author-ID,author IDs>>.
While vendor IDs are not directly related to API extensions, the reservation
process is similar, and so is described in this section.

To reserve a Khronos vendor ID, you must first have a Khronos author ID.
Propose a merge request against <<extensions-api-registry,`an.xml`>> in the
`main` branch.
The merge must define a new enumerant by adding an `<enum>` tag to the
`ANARIVendorId` `<enums>` tag, following the existing examples.
The `value` attribute of the `<enum>` must be the next available unused
value, and is the reserved vendor ID.
The `name` attribute must be `ANARI_VENDOR_ID_<author>`, where `<author>` is
the author tag.
The vendor ID will be reserved only once this merge request has been
accepted.

Please do not try to reserve vendor IDs unless you are making a good faith
effort to develop an implementation of a Khronos API and require one for
that purpose.

[NOTE]
.Note
====
Other Khronos APIs such as OpenCL also utilize vendor IDs and share the
Khronos vendor ID space.
To obtain a vendor ID for these APIs, first reserve it in ANARI's `an.xml`
and once that's done, utilize it in the other API.
To avoid collisions, we are currently utilizing `an.xml` as the central
Khronos vendor ID registry.
====

== Registering Extensions

Extensions must be registered with Khronos.
Registration means:

  * Receiving an extension number.
  * Adding the extension or layer name to the list in `an.xml` and appearing
    on the Khronos registry website, which will link to associated
    documentation hosted on Khronos.
  * For extensions which add to the ANARI API, including definitions of
    those additions to `an.xml`.

Registration for Khronos members is handled by filing a merge request in the
internal gitlab repository against the branch containing the core
specification against which the extension or layer will be written.
The merge must modify `an.xml` to define extension names, API interfaces,
and related information.
Registration is not complete until the registry maintainer has validated and
accepted the merge.

Since this process could in principle be completely automated, this suggests
a scalable mechanism for accepting registration of non-Khronos extensions.
Non-Khronos members who want to create extensions must register with Khronos
by creating a GitHub account, and registering their author ID
to that account.
They can then submit new extension registration requests by proposing merges
to `an.xml`.
On acceptance of the merge, the extension will be registered, though its
specification need not be checked into the Khronos GitHub repository at that
point.

The registration process can be split into several steps to accommodate
extension number assignment prior to extension publication:

  * Acquire an extension number.
    This is done by proposing a merge request against `an.xml` similarly to
    how <<extensions-author-ID,author IDs are reserved>>.
    The merge should add a new `<extension>` tag at the end of the file with
    attributes specifying the proposed extension `name`, the next unused
    sequential extension `number`, the `author` and `contact` information
    (if different than that already specified for the author ID used in the
    extension name), and finally, specifying `supported="disabled"`.
    The extension number will be reserved only once this merge request is
    accepted into the `main` branch.
  * Develop and test the extension using the registered extension number.
  * Publish the extension to Khronos using the previously registered
    extension number, by submitting merge requests to the `main` branch
    defining the changes specific to the extension.
    Changes to both the specification source, and to `an.xml` will be
    needed.
  ** Extension changes to the specification source must be protected by
     asciidoctor conditionals as described in the
     <<extensions-documenting,Documenting Extensions>> section.
  ** Changes to `an.xml` must define the extension interfaces in the
     `<extension>` block, and must also change the `supported` attribute
     value of the `<extension>` to `supported="anari"`.
  ** When publishing an extension, mark it as enabled by proposing a merge
     to the `main` branch changing the `supported` attribute value of the
     `<extension>` to `supported="anari"`.
     This should be completely automated and under the control of the
     publishers, to allow them to align publication on Khronos with product
     releases.
     However, complete automation might be difficult, since steps such as
     regenerating and validating the ANARI header files are involved.
     Once the merge is accepted and the corresponding updated header with
     the new extension interface is committed to the `main` branch,
     publication is complete.
  ** Publishing on the Khronos public GitHub repository is
     preferred whenever possible.
     Khronos members may instead create branches on Khronos' internal gitlab
     server, but those branches will eventually be mirrored to GitHub.
  ** Once the merge request defining an extension has been accepted into the
     `main` branch, publication is complete - although it may not be
     visible on GitHub until the next regular core Specification update is
     pushed out.
  * It is still possible to publish a separate branch of the repository with
    appropriate changes relative to the core ANARI API branch instead, but
    this approach is deprecated and discouraged.
    If this is done, all changes to `an.xml` must still be made in the
    `main` branch.

ifdef::editing-notes[]
[NOTE]
.editing-note
====
TODO: This section is subject to change and not complete yet, but in broad
is how we expect extension registration and specifications to work.
The process will be refined as members and outside authors define further
extensions.
====
endif::editing-notes[]


[[extensions-documenting]]
== Documenting API Versions and Extensions

API versions and extensions are documented as modifications to the ANARI
specification.
Changes specific to a version or extension are protected by asciidoctor
conditionals.
The changes are only visible in generated documentation when the
Specification is built with an asciidoctor attribute of that name defined.

However, specifications generated from this branch will only include the
extension when the Makefile is invoked appropriately.


[[extensions-documenting-extensions]]
=== Changes for New Extensions

Most language defining extensions can be localized either into a small
number of asciidoctor include files which are conditionally included in the
core specification chapters and appendices, or into parts of `an.xml`
defining the extension interfaces.

[NOTE]
.Note
====
We do not yet fully document an example of including a new version or
extension.
New versions are authored only by Khronos and examples will be available at
such time that we publish a new version.
Extension authors should refer to the `main` branch and search for the
names of existing extensions for markup examples.
====

Changes for extensions include (but may not be limited to) the following:

  * All extensions must add an appendix to the ANARI specification.
  ** The extension appendices are also incorporated in separate
     per-extension reference pages, and must rigidly follow the structure of
     the model appendices (although individual subsections can be added or
     removed as required).
  ** When creating references to the extension appendix from elsewhere in
     the Specification, use one of the following two styles.
     The first style is currently preferred.
+
[source,asciidoc]
.Example Markup
----
A link to the `<<ANARI_KHR_geometric_model>>` extension.

Another link to the `apiext:ANARI_KHR_geometric_model` extension.
----
  * In the preamble to the appendix, start with an asciidoctor `include` of
    the automatically generated meta information.
    This information includes the extension name string, type, number,
    revision, and contact information from `an.xml`.
  * Following the `include`, add as many of the following items as are
    meaningful:
  ** *Status* - *Complete*, *Draft*, or other.
     When an extension is published in the `main` branch, it is normally
     assumed to be complete; the *Status* field should be removed at this
     time, unless it contains additional information.
  ** *Last Modified Date* - if wanted, although git log queries can provide
     equivalent information.
  ** *IP Status* - Such as *No known IP claims*, or more specific
     information if there are known IP claims and the extension has, or has
     not been ratified by the Khronos Board of Promoters.
  ** *Interactions and External Dependencies* - may include requirements or
     interactions with optional ANARI features, SPIR-V (`SPV`) and OpenGL
     extensions, and interactions (other than strictly requiring) with other
     ANARI extensions.
  ** *Contributors* - Names and corporate affiliations of people who have
     made significant direct contributions to this extension.
  * Following these items, add whitespace followed by a *Description*
    section.
    The first paragraph of this section should be a compact, standalone
    description of the extension's functionality and purpose, suitable for
    use in summaries of new functionality such as press releases or the
    ANARI change log.
    Additional paragraphs expanding on the description may be added at the
    author's discretion.
  * Following the *Description* section, add the following sections, If
    there are no new interfaces of a given type, use "`None`" as the body of
    that section.
  ** *New Enum Constants* (include elink{cl} links to the enumerated type(s)
     being extended, followed by ename{cl} links to each individual new
     enumerant).
  ** *New Enums* (include elink{cl} links to the new enumerated type(s)).
  ** *New Structures* (include slink{cl} links to the new structure(s)).
  ** *New Functions* (include flink{cl} links to the new command(s)).
  ** *Issues* (in itemized list style, describing each significant issue
     raised during development of the extension, and its resolution).
  ** *Version History* (in itemized list style, describing significant
     functional changes to the extension during its development).
  * Each extension's appendix file is automatically included from
    `appendices/extensions.txt` via code generated from `an.xml`.
    It is no longer necessary to explicitly include the appendices.
  * Extensions usually make significant additions and changes to the ANARI
    specification.
    They often add an entirely new chapter, or a new section of an existing
    chapter, defining the new commands, structures, and enumerants.
    For example, in the case of `ANARI_EXT_debug_marker`, it adds a new section
    of the "`Debugging`" chapter in `chapters/debugging.txt`, by including
    in that file:
+
[source,asciidoc]
.Example Markup
----
\ifdef::ANARI_EXT_debug_marker[]
\include::chapters/ANARI_EXT_debug_marker/wsi.txt[]
\endif::ANARI_EXT_debug_marker[]
----
  * In every other place where the extension alters the behavior of the core
    Specification, make such changes and protect the modifications with the
    same asciidoctor conditionals.
    For example, `ANARI_KHR_surface` adds new error codes to ANARI.
    These are added to `chapters/fundamentals.txt` in the "`Return Codes`"
    section as follows:
+
[source,asciidoc]
.Example Markup
----
... list of existing error codes
\ifdef::ANARI_KHR_surface[]
\include::ANARI_KHR_surface/AnariResultErrorDescriptions_surface.txt[]
\endif::ANARI_KHR_surface[]
----
  * If two extensions interact, the asciidoctor conditionals must be
    carefully structured so as to properly document the interactions if the
    specification is built with both extensions.
    Asciidoc conditionals allow "and" and "or" constructs (see:
    http://asciidoctor.org/docs/user-manual/#conditional-preprocessor-directives
    and
    http://asciidoctor.org/docs/user-manual/#checking-multiple-attributes-ifdef-and-ifndef-only).
+
[source,asciidoc]
.Example Markup
----
\ifdef::ANARI_KHR_foo[]
... discussion of ANARI_KHR_foo ...
\ifdef::ANARI_KHR_fum[]
... discussion of interactions between ANARI_KHR_foo and ANARI_KHR_fum ...
\endif::ANARI_KHR_fum[]
\endif::ANARI_KHR_foo[]

\ifdef::ANARI_KHR_fum[]
... discussion of ANARI_KHR_fum ...
\endif::ANARI_KHR_fum[]
----
  * In cases where a new extension (A) modifies both core and an existing
    extension (B), if the new extension (A) becomes part of the core at a
    future release (i.e. is no longer an extension), the portion of the new
    extension that modified the existing extension (B) effectively becomes
    part of that existing extension.
    Thus, at the new core release, enabling the pre-existing extension (B)
    also enables the functionality that was previously enabled by enabling
    the previously-new extension (A).
  * For vendor extensions, changes made to existing core Specification
    source files and to `an.xml` all fall under the Contributor License
    Agreement.
    Vendors may use their own copyright on new files they add to the
    `main` branch, although that copyright must be compatible with the
    Specification copyright.
  * In most cases, there will be at most two new files added to the
    specification: `extensions/*extension_name*.txt`, and
    `chapters/*extension_name*.txt`.
    If you need more than one new file in either the `chapters/` or
    `extensions/` directories, create a subdirectory named with the
    extension name and place the new files there.
    For example, instead of `chapters/ANARI_KHR_android_surface.txt`, there is
    `chapters/ANARI_KHR_android_surface/platformCreateSurface_android.txt` and
    `chapters/ANARI_KHR_android_surface/platformQuerySupport_android.txt`, both
    of which are conditionally included elsewhere in the core specification
    files.
  * Valid usage statements referring to interactions between structures in a
    pname:pNext chain must be described in the parent structure's language,
    as specified <<extensions-interactions-parent, in more detail below>>.
  * Valid usage statements must: be kept atomic with regards to extension
    conditionals.
    Do not surround part of a single statement with conditionals.
    Valid usage statements are automatically extracted from the
    specification for use by ecosystem components like the validation
    layers, and the extraction scripts need to know which valid usage
    statements apply to which extensions.
    The loops required to deal with partial statements are simply not worth
    the trouble.
    For example, instead of
+
[source,asciidoc]
.Example Markup
----
  * If pname:buffer was created with a sharing mode of
    ename:ANARI_SHARING_MODE_EXCLUSIVE, pname:srcQueueFamilyIndex and
    pname:dstQueueFamilyIndex must: either both be
    ename:ANARI_QUEUE_FAMILY_IGNORED, or both be a valid queue family (see
    <<devsandqueues-queueprops>>)
\ifdef::ANARI_KHR_external_memory[]
    unless one of them is ename:ANARI_QUEUE_FAMILY_EXTERNAL_KHR and the other
    is ename:ANARI_QUEUE_FAMILY_IGNORED.
\endif::ANARI_KHR_external_memory[]
----
+
Use
+
[source,asciidoc]
.Example Markup
----
ifndef::ANARI_KHR_external_memory[]
  * If pname:buffer was created with a sharing mode of
    ename:ANARI_SHARING_MODE_EXCLUSIVE, pname:srcQueueFamilyIndex and
    pname:dstQueueFamilyIndex must: either both be
    ename:ANARI_QUEUE_FAMILY_IGNORED, or both be a valid queue family (see
    <<devsandqueues-queueprops>>)
endif::ANARI_KHR_external_memory[]
ifdef::ANARI_KHR_external_memory[]
  * If pname:buffer was created with a sharing mode of
    ename:ANARI_SHARING_MODE_EXCLUSIVE, pname:srcQueueFamilyIndex and
    pname:dstQueueFamilyIndex must: either both be
    ename:ANARI_QUEUE_FAMILY_IGNORED, both be a valid queue family (see
    <<devsandqueues-queueprops>>), or be
    ename:ANARI_QUEUE_FAMILY_EXTERNAL_KHR and ename:ANARI_QUEUE_FAMILY_IGNORED in
    either order
endif::ANARI_KHR_external_memory[]
----

When writing language dependent on the interaction of multiple extensions,
asciidoctor conditional syntax is very restricted and only supports a single
level of logical AND (`+`) or OR (`,`) operators.
For example, if a section of text only applies when one extensions is
enabled and another is not, the following markup will not work:

[source,asciidoc]
.Example Markup (Does Not Work)
----
\ifdef::ANARI_KHR_shader_float16_int8+!ANARI_KHR_8bit_storage[]
This should only appear if ANARI_KHR_shader_float16_int8 is defined and
ANARI_KHR_8bit_storage is not defined.
\endif::ANARI_KHR_shader_float16_int8+!ANARI_KHR_8bit_storage[]
----

Instead, expand the complex conditional into nested simpler ones:

[source,asciidoc]
.Example Markup (Does Work)
----
\ifdef::ANARI_KHR_shader_float16_int8[]
\ifndef::ANARI_KHR_8bit_storage[]
This should only appear if ANARI_KHR_shader_float16_int8 is defined and
ANARI_KHR_8bit_storage is not defined.
\endif::ANARI_KHR_8bit_storage[]
\endif::ANARI_KHR_shader_float16_int8
----


[[extensions-ifdefs]]
==== Changes for New Extensions

[[extensions-documenting-versions]]
=== Changes for New API Versions

When creating a new version of the core API, such as ANARI 1.1, changes are
done similarly to extensions, with the following differences:

[NOTE]
.Note
====
This list is being developed in conjunction with the ANARI 1.1
Specification, is probably incomplete, and is subject to change.
Items marked *TBD* are still being discussed within the ANARI Working
Group.
====

  * New API versions will be more tightly integrated into the specification
    sources than extensions, although it's still helpful to partition
    changes into new files when they're sufficiently self-contained.
  * New API versions must add an appendix to the ANARI specification.
    Unlike the extension appendices, this appendix simply summarizes release
    information (dates of Ratification by the Khronos Board of Promoters,
    and of public release), the contributor list, and high-level
    descriptions of new features in this version (including the names of any
    extensions promoted to core status in this version).
  ** TBD - we might choose to include a new API summary with links into the
     spec body for new features, as well.
  * TBD - how to name and where to include this appendix file.
  * Changes to the Specification for new versions will range from small
    changes to existing language, to new commands and structures, to adding
    entire new chapters.
    New chapters must be defined in separate files under the `chapters/`
    directory, and included at an appropriate point in `anspec.txt` or other
    specification source files.
    Other changes and additions are included inline in existing chapters.
  * All changes that are specific to the new version must be protected by
    the asciidoctor conditional (e.g. the version name).
    For example, in the case of ANARI 1.1:
+
[source,asciidoc]
.Example Markup
----
Add a new chapter:

\ifdef::ANARI_VERSION_1_1[]
\include::chapters/newchapter11.txt[]
\endif::ANARI_VERSION_1_1[]

Add a new feature:

\ifdef::ANARI_VERSION_1_1[]
... language describing the new command, structure, or enumeration
\endif::ANARI_VERSION_1_1[]
----
  * The specification must continue to be a valid document when the new
    version is *not* defined, so that (for example) the ANARI 1.1 branch
    specification can continue to be updated.
  * TBD - how to deprecate extensions which have been promoted to core
    status in the new version, while continuing to have those extensions
    appear then older versions of the specification are being built.
  * The same constraints <<extensions-documenting-extensions, described
    above>> for Valid Usage statements modified by extensions apply for new
    versions.


== Assigning Extension Token Values

Extensions can define their own enumeration types and assign any values to
their enumerants that they like.
Each enumeration has a private namespace, so collisions are not a problem.
However, when extending existing enumeration objects with new values, care
must be taken to preserve global uniqueness of values.
Enumerations which define new bits in a bitmask are treated specially as
described in <<extensions-reserving-bitmask-values,Reserving Bitmask
Values>> below.

Each extension is assigned a range of values that can be used to create
globally-unique enum values.
Most values will be negative numbers, but positive numbers are also
reserved.
The ability to create both positive and negative extension values is
necessary to enable extending enumerations that
assign special meaning to negative and positive values.
Therefore, 1000 positive and 1000 negative values are reserved for each
extension.
Extensions must not define enum values outside their reserved range without
explicit permission from the owner of those values (e.g. from the author of
another extension whose range is infringed on, or from the Khronos Registrar
if the values do not belong to any extension's range).

[NOTE]
.Note
====
Typically, extensions use a unique offset for each enumeration constant they
add, yielding 1000 distinct token values per extension.
Since each enumeration object has its own namespace, if an extension needs
to add many enumeration constant values, it can reuse offsets on a per-type
basis.
====

The information needed to add new values to the XML are as follows:

  * The **extension name** (e.g. `ANARI_KHR_swapchain`) that is adding the new
    enumeration constant.
  * The existing enumeration **type** being extended
  * The name of the new enumeration **token** being added (e.g.
    etext:ANARI_TEXTURE_FORMAT_RGBA32UI_KHR).
  * The **offset**, which is an integer between 0 and 999 relative to the
    base being used for the extension.
  * The **direction** may be specified to indicate a negative value
    (`dir="-"`) when needed for negative values indicating errors.
    The default direction is positive, if not specified.

Implicit is the registered number of an extension, which is used to create a
range of unused values offset against a global extension base value.
Individual enumerant values are calculated as offsets in that range.
Values are calculated as follows:

  * [eq]#_base_value_ = 1000000000#
  * [eq]#_range_size_ = 1000#
  * [eq]#enum_offset(_extension_number_, _offset_) = _base_value_ {plus}
    (_extension_number_ - 1) {times} _range_size_ + _offset_#
  * Positive values: [eq]#enum_offset(_extension_number_, _offset_})#
  * Negative values: [eq]#enum_offset(_extension_number_, _offset_})#

The exact syntax for specifying extension enumerant values is defined in the
`readme.pdf` specifying the format of `an.xml`, and extension authors can
also refer to existing extensions for examples.

If an extension becomes part of core, the enumerant values should remain the
same as they were in the original extension, in order to maintain binary
compatibility with existing applications.


[[extensions-reserving-bitmask-values]]
=== Reserving Bitmask Values

Enumerants which define bitmask values are a special case, since there are
only a small number of unused bits available for extensions.
For core ANARI API and KHR extension bitmask types, reservations must be
approved by a vote of the ANARI Working Group.
For EXT and vendor extension bitmask types, reservations must be approved by
the listed contact of the extension.
Bits are reserved in the same fashion as extension numbers, by creating a
dummy reservation for each bit in the disabled XML `<extension>` block for
that extension in the `main` branch.
Once the extension is ready to be merged into `main`, the `<extension>`
block is updated with the actual name.
An example reservation for a disabled extension is:

[source,xml]
----
<extension name="ANARI_AMD_extension_24" number="24" author="AMD" supported="disabled">
  <require>
    <enum bitpos="6" extends="ANARIQueueFlagBits" name="ANARI_QUEUE_RESERVED_6_BIT_KHR"/>
----

[NOTE]
.Note
====
Because of the way in which extension bitmask values are assigned inside the
XML `<extension>` tag, it is not always obvious what the next free bit in a
bitmask type is, or when a collision occurs.
The most straightforward way to determine the next free bit for a given
bitmask type is to look at the declaration of that type in the generated
header files.
When generating the headers, the script will raise warnings about "`Two
enums found with the same value`" that will help identify this problem.
====


[[extensions-new-flags-types]]
== New Flags and Bitmask Types

When an extension introduces a new flags (etext:*Flags) type, it should also
introduce a corresponding new bitmask (etext:*FlagBits) type.
The flags type contains zero more more bits from the bitmask, and is used to
specify sets of bits for commands or structures.

In some cases, a new flags type will be defined with no individual bits yet
specified.
This usage occurs when the flags are intended for future expansion.
In this case, even though the corresponding bitmask type is not yet useful,
the (empty) bitmask type should be defined in `an.xml`.
The empty bitmask type and corresponding flags type should be given
boilerplate definitions in the specification.


== Required Extension Tokens

In addition to any tokens specific to the functionality of an extension, all
extensions must define two additional tokens.

  * `ANARI_EXTNAME_SPEC_VERSION` is an integer constant which is the revision
    of the extension named `ANARI_extname` (`EXTNAME` is all upper-case, while
    extname is the capitalization of the actual extension name).
    This value begins at 1 with the initial version of an extension
    specification, and is incremented when changes are made.
    Note that the revision of an extension defined in the ANARI header
    files and the revision supported by the ANARI implementation may differ. 
    The revision value indicates a patch version of the extension
    specification, and differences in this version number maintain full
    compatibility, as defined in the
    Compatibility Guarantees section of the ANARI API Specification.

[NOTE]
.Note
====
Any changes requiring the addition or removal of a type or command should be
done by creating a new extension.
The resulting extension should take care to include the appropriate
dependency information on the original extension.
====

  * `ANARI_EXTNAME_EXTENSION_NAME` is a string constant which is the name of
    the extension.


[[extension-function_prototypes]]
== Extension Function Prototypes

Function pointer declarations and function prototypes for all core ANARI
API commands are included in the ANARI header files.
These come from the official XML specification of the ANARI API hosted by
Khronos.

Function pointer declarations are also included in the ANARI header for all
commands defined by registered extensions.
Function prototypes for extensions may be included in the headers.
Extension commands that are part of the ANARI ABI must be flagged in the
XML.
Function prototypes will be included in the headers for all extension
commands that are part of the ANARI ABI.

An extension can be considered platform specific, in which case its
interfaces in the header files are protected by #ifdefs.
This is orthogonal to whether an extension command is considered to be part
of the ANARI ABI.


== Accessing Extension Functions from Programs

fname:anariDeviceGetProcAddress can be used in
order to obtain function pointer addresses for core and extension commands
(per the description in the "`Command Function Pointers`" section of the
ANARI API Specification).
Different ANARI API loaders can choose to statically export functions for
some or all of the core ANARI API commands, and can statically export
functions for some or all extension commands.
If a loader statically exports a function, an application can link against
that function without needing to call ftext:anariDeviceGetProcAddress.
