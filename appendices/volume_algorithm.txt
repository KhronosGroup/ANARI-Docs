// Copyright (c) 2021 Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[appendix]
[[transferFunction1D_algorithm]]
== Example Algorithm for Rendering a TransferFunction1D Volume (Informative)

The following is a possible ray-marching implementation of the
`transferFunction1D` volume. Implementations are not required to implement this
but are encouraged to use it as a reference when adapting other algorithms to
produce visually similar results.

[source]
....
Color = 0
Transmittance = 1

while x in Volume
   StepValue = value(x)
   StepColor = color(StepValue).rgb
   StepOpacity = color(StepValue).a * opacity(StepValue)
   StepTransmittance = pow(1 - StepOpacity, Step / unitDistance)

   Color += Transmittance * (1 - StepTransmittance) * StepColor
   Transmittance *= StepTransmittance

   x += Direction * Step
....

Any transformations the volume is subject to are assumed to be taken into
account during sampling of `value(x)`.

The current sample location `x` is in world space. The `Direction` vector is the
view/ray direction and is assumed to be normalized. The variables `value`,
`opacity`, `color` and `unitDistance` are parameters of the `transferFunction1D`
volume object.
