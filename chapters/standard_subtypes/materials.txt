// Copyright (c) 2021 Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[standard_subtypes_materials]]
=== Materials

This section outlines material subtypes which are supplied by complete ANARI
device implementations.

Most material parameters can be set to a constant, `ANARISampler` or string
value. Unless otherwise noted, the string selects the surface attribute that
will be used to source the parameter during rendering.

==== Matte

The `matte` material reflects light uniformly into the hemisphere, i.e.,
it exhibits Lambertian reflectance and thus its apparent brightness is
independent of the viewing direction. The matte material is always treated as
entirely opaque.

.Parameters of the matte material.
[cols="<,<,>,<",options="header",]
|===
|Name  |Type         |Default   |Description
|color |`FLOAT32_VEC3` / `SAMPLER` / `STRING` | (0.8, 0.8, 0.8) | diffuse color
|===


==== Transparent Matte

The `transparentMatte` material extends the <<Matte>> material by adding
support for (partial) cut-out transparency.

.Parameters of the transparentMatte material.
[cols="<,<,>,<",options="header",]
|===
|Name  |Type         |Default   |Description
|color |`FLOAT32_VEC3` / `SAMPLER` / `STRING` | (0.8, 0.8, 0.8) | diffuse color
|opacity |`FLOAT32` / `SAMPLER` / `STRING` | 1.0 | opacity
|===

If `color` is of type `ANARI_SAMPLER` or `ANARI_STRING`, the fourth
component of the value fetched from a sampler or attribute is multiplied
with the opacity value.

////
==== OBJ Material

The OBJ material is the workhorse material supported by both the
link:#scivis-renderer[SciVis renderer] and the link:#path-tracer[path
tracer] (the link:#ambient-occlusion-renderer[Ambient Occlusion
renderer] only uses the `kd` and `d` parameter). It offers widely used
common properties like diffuse and specular reflection and is based on
the http://paulbourke.net/dataformats/mtl/[MTL material format] of
Lightwave’s OBJ scene files. To create an OBJ material pass the type
string `obj` to `anariNewMaterial`. Its main parameters are

.Main parameters of the OBJ material.
[cols="<,<,>,<",options="header",]
|===
|Type |Name |Default |Description
|vec3f |kd |white 0.8 |diffuse color
|vec3f |ks |black |specular color
|float |ns |10 |shininess (Phong exponent), usually in [2–10^4^]
|float |d |opaque |opacity
|vec3f |tf |black |transparency filter color
|ANARISampler |map_bump |NULL |normal map
|===

In particular when using the path tracer it is important to adhere to
the principle of energy conservation, i.e., that the amount of light
reflected by a surface is not larger than the light arriving. Therefore
the path tracer issues a warning and renormalizes the color parameters
if the sum of `Kd`, `Ks`, and `Tf` is larger than one in any color
channel. Similarly important to mention is that almost all materials of
the real world reflect at most only about 80% of the incoming light. So
even for a white sheet of paper or white wall paint it is better not to set
`Kd` larger than 0.8; otherwise rendering times are unnecessary long and
the contrast in the final images is low (for example, the corners of a
white room would hardly be discernible, as can be seen in the figure
below).

{empty}[Comparison of diffuse rooms with 100% reflecting white paint
(left) and realistic 80% reflecting white paint (right), which leads to
higher overall contrast. Note that exposure has been adjusted to achieve
similar brightness levels.][imgDiffuseRooms]

If present, the color component of <<geometries>> is also
used for the diffuse color `Kd` and the alpha component is also used for
the opacity `d`.

Normal mapping can simulate small geometric features via the texture
`map_Bump`. The normals latexmath:[$n$] in the normal map are with
respect to the local tangential shading coordinate system and are
encoded as latexmath:[$(.5n+1)$], thus a texel
//latexmath:[$(0.5, 0.5, 1)$]footnote:[respectively
//latexmath:[$(127, 127, 255)$] for 8 bit textures and
//latexmath:[$(32767, 32767, 65535)$] for 16 bit textures] represents the
unperturbed shading normal latexmath:[$(0, 0, 1)$]. Because of this
encoding an sRGB gamma <<texture>> format is ignored and
normals are always fetched as linear from a normal map. Note that the
orientation of normal maps is important for a visually consistent look:
by convention ANARI uses a coordinate system with the origin in the
lower left corner; thus a convexity will look green toward the top of
the texture image (see also the example image of a normal map). If this
is not the case flip the normal map vertically or invert its green
channel.

{empty}[Normal map representing an exalted square pyramidal
frustum.][imgNormalMap]

Note that currently only the path tracer implements colored transparency
with `Tf` and normal mapping with `map_Bump`.

All parameters (except `Tf`) can be textured by passing a
<<texture>> handle, prefixed with `map_`. The fetched
texels are multiplied by the respective parameter value. If only the
texture is given (but not the corresponding parameter), only the texture
is used (the default value of the parameter is _not_ multiplied). The
color textures `map_Kd` and `map_Ks` are typically in one of the sRGB
gamma encoded formats, whereas textures `map_Ns` and `map_d` are usually
in a linear format (and only the first component is used). Additionally,
all textures support link:#texture-transformations[texture
transformations].

{empty}[Rendering of a OBJ material with wood textures.][imgMaterialOBJ]

==== Principled

The Principled material is the most complex material offered by the
link:#path-tracer[path tracer], which is capable of producing a wide
variety of materials (e.g., plastic, metal, wood, glass) by combining
multiple different layers and lobes. It uses the GGX microfacet
distribution with approximate multiple scattering for dielectrics and
metals, uses the Oren-Nayar model for diffuse reflection, and is energy
conserving. To create a Principled material, pass the type string
`principled` to `anariNewMaterial`. Its parameters are listed in the
table below.

.Parameters of the Principled material.
[width="97%",cols="<9%,<19%,>13%,<59%",options="header",]
|===
|Type |Name |Default |Description
|vec3f |baseColor |white 0.8 |base reflectivity (diffuse and/or
metallic)

|vec3f |edgeColor |white |edge tint (metallic only)

|float |metallic |0 |mix between dielectric (diffuse and/or specular)
and metallic (specular only with complex IOR) in [0–1]

|float |diffuse |1 |diffuse reflection weight in [0–1]

|float |specular |1 |specular reflection/transmission weight in [0–1]

|float |ior |1 |dielectric index of refraction

|float |transmission |0 |specular transmission weight in [0–1]

|vec3f |transmissionColor |white |attenuated color due to transmission
(Beer’s law)

|float |transmissionDepth |1 |distance at which color attenuation is
equal to transmissionColor

|float |roughness |0 |diffuse and specular roughness in [0–1], 0 is
perfectly smooth

|float |anisotropy |0 |amount of specular anisotropy in [0–1]

|float |rotation |0 |rotation of the direction of anisotropy in [0–1], 1
is going full circle

|float |normal |1 |default normal map/scale for all layers

|float |baseNormal |1 |base normal map/scale (overrides default normal)

|bool |thin |false |flag specifying whether the material is thin or
solid

|float |thickness |1 |thickness of the material (thin only), affects the
amount of color attenuation due to specular transmission

|float |backlight |0 |amount of diffuse transmission (thin only) in
[0–2], 1 is 50% reflection and 50% transmission, 2 is transmission only

|float |coat |0 |clear coat layer weight in [0–1]

|float |coatIor |1.5 |clear coat index of refraction

|vec3f |coatColor |white |clear coat color tint

|float |coatThickness |1 |clear coat thickness, affects the amount of
color attenuation

|float |coatRoughness |0 |clear coat roughness in [0–1], 0 is perfectly
smooth

|float |coatNormal |1 |clear coat normal map/scale (overrides default
normal)

|float |sheen |0 |sheen layer weight in [0–1]

|vec3f |sheenColor |white |sheen color tint

|float |sheenTint |0 |how much sheen is tinted from sheenColor toward
baseColor

|float |sheenRoughness |0.2 |sheen roughness in [0–1], 0 is perfectly
smooth

|float |opacity |1 |cut-out opacity/transparency, 1 is fully opaque
|===

All parameters can be textured by passing a <<texture>>
handle, prefixed with `map_` (e.g., `map_baseColor`).
link:#texture-transformations[texture transformations] are supported as
well.

{empty}[Rendering of a Principled coated brushed metal material with
textured anisotropic rotation and a dust layer (sheen) on
top.][imgMaterialPrincipled]

////
