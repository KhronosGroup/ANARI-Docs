// Copyright (c) 2021 Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[object_types_light]]
=== Light

Lights in ANARI are virtual objects that emit light into the world and
thus illuminate objects. To create a new light object of given subtype
`subtype` use

[source,cpp]
....
ANARILight anariNewLight(ANARIDevice, const char *subtype);
....

All light sources accept the following parameters:

.Parameters accepted by all lights.
[cols="<,<,>,<4",options="header,unbreakable"]
|===================================================================================================
| Name     | Type          |    Default | Description
| color    |`FLOAT32_VEC3` |  (1, 1, 1) | color of the light, in 0..1
|===================================================================================================

The transformation of an <<Instance, instance>> apply only to vectors
like `position` or `direction` of a light, but _not_ to affect sizes
like `radius` (feature `KHR_AREA_LIGHTS`).

.Additional parameters accepted by all lights with feature `KHR_AREA_LIGHTS`.
[cols="<,<,>,<4",options="header,unbreakable"]
|===================================================================================================
| Name     | Type          |    Default | Description
| visible  |`BOOL`         |     `TRUE` | whether the light can be directly seen
|===================================================================================================

[[object_types_light_directional]]
==== Directional

Feature: `KHR_LIGHT_DIRECTIONAL`

The directional light is thought to
be far away (outside of the scene), thus its light arrives (mostly) as
parallel rays. It is created by passing the subtype string `directional` to
`anariNewLight`. In addition to the <<object_types_light, general parameters>>
understood by all lights, the directional light supports the following
special parameters:

.Special parameters accepted by the directional light.
[cols="<,<,>,<4",options="header,unbreakable"]
|===================================================================================================
| Name            | Type         |    Default | Description
| direction       |`FLOAT32_VEC3`| (0, 0, -1) | main emission direction of the directional light
| irradiance      |`FLOAT32`     |          1 | the amount of light arriving at a surface point,
                                                assuming the light is oriented towards to the
                                                surface, in W/m^2^
|===================================================================================================

.Additional parameters accepted by the directional light with feature `KHR_AREA_LIGHTS`.
[cols="<3,<2,>2,<9",options="header,unbreakable"]
|===================================================================================================
| Name            | Type         |    Default | Description
| angularDiameter |`FLOAT32`     |          0 | apparent size (angle in radians) of the light
| radiance        |`FLOAT32`     |          1 | the amount of light emitted in a direction, in W/sr/m^2^;
                                               `irradiance` takes precedence if also specified
|===================================================================================================

[NOTE]
.Note
==================
Feature `KHR_AREA_LIGHTS`: Setting the angular diameter to a value greater than
zero will result in soft shadows when supported by the implementation. For
instance, the apparent size of the sun is about 0.53Â° or 0.00925 rad.
==================


[[object_types_light_point]]
==== Point

Feature: `KHR_LIGHT_POINT`

The point light (or with feature the sphere light) is a light emitting
uniformly in all directions (from the surface toward the outside). It is created
by passing the subtype string `point` to `anariNewLight`. In addition to the
<<object_types_light, general parameters>> understood by all lights, the point light supports
the following special parameters:

.Special parameters accepted by the point light.
[cols="<,<,>,<4",options="header,unbreakable"]
|===================================================================================================
| Name       | Type         |    Default | Description
| position   |`FLOAT32_VEC3`|  (0, 0, 0) | the position of the point light
| intensity  |`FLOAT32`     |          1 | the overall amount of light emitted by the light in a
                                           direction, in W/sr
| power      |`FLOAT32`     |          1 | the overall amount of light energy emitted, in W;
                                          `intensity` takes precedence if also specified
|===================================================================================================

Feature `KHR_AREA_LIGHTS`: Setting the radius to a value greater than zero will
result in soft shadows when the renderer support it.

.Additional parameters accepted by the point light with feature `KHR_AREA_LIGHTS`.
[cols="<,<,>,<4",options="header,unbreakable"]
|===================================================================================================
| Name     | Type    | Default | Description
| radius   |`FLOAT32`|       0 | the size of the sphere light
| radiance |`FLOAT32`|       1 | the amount of light emitted by a point on the light source in a direction,
                                 in W/sr/m^2^; `intensity` (or `power`) takes precedence if also specified
|===================================================================================================


[[object_types_light_spot]]
==== Spot

Feature: `KHR_LIGHT_SPOT`

The spotlight is a light emitting into a cone of directions. It is
created by passing the subtype string `spot` to `anariNewLight`. In
addition to the <<object_types_light, general parameters>> understood by all
lights, the spotlight supports the special parameters listed in the
table.

.Special parameters accepted by the spotlight.
[cols="<,<,>,<3",options="header,unbreakable"]
|===================================================================================================
| Name         | Type         |    Default | Description
| position     |`FLOAT32_VEC3`|  (0, 0, 0) | the center of the spotlight
| direction    |`FLOAT32_VEC3`| (0, 0, -1) | main emission direction, the axis of the spot
| openingAngle |`FLOAT32`     |       {pi} | full opening angle (in radians) of the spot; outside
                                             of this cone is no illumination
| falloffAngle |`FLOAT32`     |        0.1 | size (angle in radians) of the region between the rim
                                             (of the illumination cone) and full intensity of the
                                             spot; should be smaller than half of `openingAngle`
| intensity    |`FLOAT32`     |          1 | the overall amount of light emitted by the light in a
                                             direction, in W/sr
| power        |`FLOAT32`     |          1 | the overall amount of light energy emitted, in W;
                                            `intensity` takes precedence if also specified
|===================================================================================================

The intensity distribution is constant within the core cone (`openingAngle` -
2 {times} `falloffAngle` and then falls off to zero (smoothly interpolated with
the smoothstep function).

//TODO image:imgSpotlight[ "Angles used by the spotlight."]

[[object_types_light_ring]]
==== Ring

Feature: `KHR_LIGHT_RING`

The ring light is a light emitting into a cone of directions. It is created by
passing the subtype string `ring` to `anariNewLight`. In addition to the <<object_types_light,
general parameters>> understood by all lights, the ring light supports the special
parameters listed in the table. The ring light is
an area light and thus has a cosine falloff.

.Special parameters accepted by the ring light.
[cols="<2,<,>,<3",options="header,unbreakable"]
|===================================================================================================
| Name         | Type         |    Default | Description
| position     |`FLOAT32_VEC3`|  (0, 0, 0) | the center of the ring light
| direction    |`FLOAT32_VEC3`| (0, 0, -1) | main emission direction, the center axis of the ring
| openingAngle |`FLOAT32`     |       {pi} | full opening angle (in radians) of the cone of directions;
                                             outside of this cone is no illumination
| falloffAngle |`FLOAT32`     |        0.1 | size (angle in radians) of the region between the rim
                                             (of the illumination cone) and full intensity;
                                             should be smaller than half of `openingAngle`
| intensity    |`FLOAT32`     |          1 | the overall amount of light emitted by the light in a
                                             direction, in W/sr
| power        |`FLOAT32`     |          1 | the overall amount of light energy emitted, in W;
                                            `intensity` takes precedence if also specified
| radius       |`FLOAT32`     |          0 | the (outer) size of the ring, the radius of a disk
                                             with normal `direction`
| innerRadius  |`FLOAT32`     |          0 | in combination with `radius` turns the disk into a
                                             ring; must be smaller than `radius`
| radiance     |`FLOAT32`     |          1 | the amount of light
                                             emitted by a point on the light source in a direction,
                                             in W/sr/m^2^; `intensity` (or `power`) takes
                                             precedence if also specified
| intensityDistribution |`ARRAY1D` / `ARRAY2D` of `FLOAT32`| | luminous intensity distribution for
                                             photometric lights; can be 2D for asymmetric
                                             illumination; values are assumed to be uniformly
                                             distributed
| c0           |`FLOAT32_VEC3`|  (1, 0, 0) | orientation, i.e., direction of the C0-(half)plane
                                             (only needed if illumination via
                                            `intensityDistribution` is asymmetric)
|===================================================================================================

Setting the radius to a value greater than zero will result in soft shadows when
the renderer uses stochastic sampling. Additionally setting the inner radius
will result in a ring instead of a disk emitting the light.

Measured light sources (IES, EULUMDAT, â¦) are supported by providing an
`intensityDistribution` {array} to modulate the intensity
per direction. The mapping is using the C-{gamma} coordinate system:
the values of the first (or only) dimension of
`intensityDistribution` are uniformly mapped to {gamma} in [0â{pi}]; the first
intensity value to 0, the last value to {pi}, thus at least two values need
to be present. If the array has a second dimension then the intensities
are not rotational symmetric around `direction`, but are accordingly
mapped to the C-halfplanes in [0â2{pi}]; the first `row` of values to 0
and 2{pi}, the other rows such that they have uniform distance to its
neighbors. The orientation of the C0-plane is specified via `c0`.

//TODO image: {empty}[C-{gamma} coordinate system for the mapping of `intensityDistribution` to the spotlight.][imgSpotCoords]

[[object_types_light_quad]]
==== Quad

Feature: `KHR_LIGHT_QUAD`

The quadfootnote:[actually a parallelogram] light is a planar,
procedural area light source emitting uniformly on one side into the
half-space. It is created by passing the subtype string `quad` to
`anariNewLight`. In addition to the <<object_types_light, general parameters>>
understood by all lights, the quad light supports the following special
parameters:

.Special parameters accepted by the quad light.
[cols="<2,<,>,<3",options="header,unbreakable"]
|===================================================================================================
| Name         | Type         |    Default | Description
| position     |`FLOAT32_VEC3`|  (0, 0, 0) | position of one vertex of the quad light
| edge1        |`FLOAT32_VEC3`|  (1, 0, 0) | vector to one adjacent vertex
| edge2        |`FLOAT32_VEC3`|  (0, 1, 0) | vector to the other adjacent vertex
| intensity    |`FLOAT32`     |          1 | the overall amount of light emitted by the light in a
                                             direction, in W/sr
| power        |`FLOAT32`     |          1 | the overall amount of light energy emitted, in W;
                                             `intensity` takes precedence if also specified
| radiance     |`FLOAT32`     |          1 | the amount of light
                                             emitted by a point on the light source in a direction,
                                             in W/sr/m^2^; `intensity` (or `power`) takes
                                             precedence if also specified
//TODO| map          |`TEXTURE`     |            | factor for `color`?
| side         |`STRING`      |     `front`| side into which light is emitted;
                                             possible values: `front`, `back`, `both`
| intensityDistribution |`ARRAY1D` / `ARRAY2D` of `FLOAT32`| | luminous intensity distribution for
                                             photometric lights; can be 2D for asymmetric
                                             illumination; values are assumed to be uniformly
                                             distributed
|===================================================================================================


Measured light sources (IES, EULUMDAT, â¦) are supported by providing an
`intensityDistribution` {array} to modulate the intensity
per direction. The mapping is using the C-{gamma} coordinate system:
the values of the first (or only) dimension of
`intensityDistribution` are uniformly mapped to {gamma} in [0â{pi}]; the first
intensity value to 0, the last value to {pi}, thus at least two values need
to be present. If the array has a second dimension then the intensities
are not rotational symmetric around `direction`, but are accordingly
mapped to the C-halfplanes in [0â2{pi}]; the first `row` of values to 0
and 2{pi}, the other rows such that they have uniform distance to its
neighbors. The orientation of the C0-plane is aligned with `edge1`.

//TODO {empty}[Defining a quad light which emits toward the reader.][imgQuadLight]

The front side is determined by the cross product of `edge2` {times} `edge1`.

[NOTE]
.Note
====
Only renderers that use stochastic sampling (like the path
tracer) will compute soft shadows from the quad light. Other renderers
will just sample the center of the quad light, which results in hard
shadows.
====

[[object_types_light_hdri]]
==== HDRI

Feature: `KHR_LIGHT_HDRI`

The HDRI light is a textured light source surrounding the scene and
illuminating it from infinity. It is created by passing the subtype string
`hdri` to `anariNewLight`. In addition to the <<object_types_light, general
parameters>> the HDRI light supports the following special parameters:

.Special parameters accepted by the HDRI light.
[cols="<10,<12,>14,<40",options="header,unbreakable"]
|===================================================================================================
| Name      | Type         |   Default | Description
| up        |`FLOAT32_VEC3`| (0, 0, 1) | up direction of the light in world-space
| direction |`FLOAT32_VEC3`| (1, 0, 0) | direction to which the center of the texture will be mapped to
| radiance  |`ARRAY2D` of `FLOAT32_VEC3`| | environment map, typically HDR with values >1, the amount
                                         of light emitted by a point on the light source in a
                                         direction, in W/sr/m^2^
// TODO:, `cube`
| layout    |`STRING`      |`equirectangular`| possible values: `equirectangular`
| scale     |`FLOAT32`     |         1 | scale factor for `radiance`
|===================================================================================================

//TODO {empty}[Orientation and Mapping of an HDRI Light.][imgHDRILight]
