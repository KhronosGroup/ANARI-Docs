// Copyright (c) 2021 Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[object_types_renderers]]
=== Renderer

Every ANARI device offers a default renderer, which works without
setting any parameters (i.e., all parameters, if any, have meaningful
defaults). Thus, passing `default` as
subtype string to <<object_types_renderer, `anariNewRenderer`>> will result in a
usable renderer. Further renderers and their parameters can be
enumerated with the <<api_concepts_introspection>> API. The default
renderer is an alias to an existing renderer that is returned first in
the list by `anariGetObjectSubtypes` when queried for `RENDERER`. Also
refer to the documentation of ANARI implementations.


////
This section outlines renderer subtypes which are supplied by complete ANARI
device implementations.

General parameters of all renderers are

.Parameters understood by all renderers.
[width="98%",cols="<17%,<18%,>24%,<41%",options="header",]
|===
|Type |Name |Default |Description
|int |pixelSamples |1 |samples per pixel

|int |maxPathLength |20 |maximum ray recursion depth

|float |minContribution |0.001 |sample contributions below this value
will be neglected to speedup rendering

|float |varianceThreshold |0 |threshold for adaptive accumulation

|float / vec3f / vec4f |backgroundColor |black, transparent |background
color and alpha (RGBA), if no `map_backplate` is set

|ANARISampler |map_backplate | |optional <<object_types_sampler>> image used
as background (use sampler type `texture2d`)

|ANARISampler |map_maxDepth | |optional screen-sized float
<<object_types_sampler>> with maximum far distance per pixel (use sampler
type `texture2d`)

|ANARIMaterial[] |material | |optional <<data>> array of
<<object_types_material>> which can be indexed by a <<Surface>>’s
`material` parameter

|uchar |pixelFilter |`ANARI_PIXELFILTER_GAUSS` |`ANARIPixelFilterType` to
select the pixel filter used by the renderer for antialiasing. Possible
pixel filters are listed below.
|===

ANARI’s renderers support a feature called adaptive accumulation, which
accelerates progressive <<rendering>> by stopping the
rendering and refinement of image regions that have an estimated
variance below the `varianceThreshold`. This feature requires a
<<object_types_framebuffer>> with an `ANARI_FB_VARIANCE` channel.

Per default the background of the rendered image will be transparent
black, i.e., the alpha channel holds the opacity of the rendered
objects. This eases transparency-aware blending of the image with an
arbitrary background image by the application. The parameter
`backgroundColor` or `map_backplate` can be used to already blend with a
constant background color or backplate texture, respectively, (and
alpha) during rendering.

ANARI renderers support depth composition with images of other
renderers, for example to incorporate geometries of a 3D UI that
were rendered with OpenGL. The screen-sized <<texture>>
`map_maxDepth` must have format `ANARI_TEXTURE_R32F` and flag
`ANARI_TEXTURE_FILTER_NEAREST`. The fetched values are used to limit the
distance of primary rays, thus objects of other renderers can hide
objects rendered by ANARI.

ANARI supports antialiasing in image space by using pixel filters,
which are centered around the center of a pixel. The size
//latexmath:[$w×w$]
of the filter depends on the selected filter type. The
types of supported pixel filters are defined by the `ANARIPixelFilterType`
enum and can be set using the `pixelFilter` parameter.

.Pixel filter types supported by ANARI for antialiasing in image space.
[width="97%",cols="<42%,<58%",options="header",]
|===
|Name |Description
|ANARI_PIXELFILTER_POINT |a point filter only samples the center of the
pixel, therefore the filter width is
//latexmath:[$w = 0$]

|ANARI_PIXELFILTER_BOX |a uniform box filter with a width of
//latexmath:[$w = 1$]

|ANARI_PIXELFILTER_GAUSS |a truncated, smooth Gaussian filter with a
standard deviation of
//latexmath:[$\sigma = 0.5$]
and a filter width of
//latexmath:[$w = 3$]

|ANARI_PIXELFILTER_MITCHELL |the Mitchell-Netravali filter with a width of
//latexmath:[$w = 4$]

|ANARI_PIXELFILTER_BLACKMAN_HARRIS |the Blackman-Harris filter with a
width of
//latexmath:[$w = 3$]
|===


==== SciVis Renderer

The SciVis renderer is a fast ray tracer for scientific visualization
which supports volume rendering and ambient occlusion (AO). It is
created by passing the type string `scivis` to `anariNewRenderer`. In
addition to the <<object_types_renderer, general parameters>> understood by all
renderers, the SciVis renderer supports the following parameters:

.Special parameters understood by the SciVis renderer.
[width="97%",cols="<19%,<28%,>17%,<36%",options="header",]
|===
|Type |Name |Default |Description
|bool |shadows |false |whether to compute (hard) shadows

|int |aoSamples |0 |number of rays per sample to compute ambient
occlusion

|float |aoDistance |10^20^ |maximum distance to consider for ambient
occlusion

|float |volumeSamplingRate |1 |sampling rate for volumes
|===

Note that the intensity (and color) of AO is deduced from an
link:#ambient-light[ambient light] in the `lights` array.footnote:[If
there are multiple ambient lights then their contribution is added] If
`aoSamples` is zero (the default) then ambient lights cause ambient
illumination (without occlusion).

==== Ambient Occlusion Renderer

This renderer supports only a subset of the features of the
link:#scivis-renderer[SciVis renderer] to gain performance. As the name
suggest its main shading method is ambient occlusion (AO),
<<object_types_light>> are _not_ considered at all and , Volume rendering
is supported. The Ambient Occlusion renderer is created by passing the
type string `ao` to `anariNewRenderer`. In addition to the
<<object_types_renderer, general parameters>> understood by all renderers the
following parameters are supported as well:

.Special parameters understood by the Ambient Occlusion renderer.
[width="97%",cols="<19%,<28%,>17%,<36%",options="header",]
|===
|Type |Name |Default |Description
|int |aoSamples |1 |number of rays per sample to compute ambient
occlusion

|float |aoDistance |10^20^ |maximum distance to consider for ambient
occlusion

|float |aoIntensity |1 |ambient occlusion strength

|float |volumeSamplingRate |1 |sampling rate for volumes
|===

==== Path Tracer

The path tracer supports soft shadows, indirect illumination and
realistic materials. This renderer is created by passing the type string
`pathtracer` to `anariNewRenderer`. In addition to the
<<object_types_renderer, general parameters>> understood by all renderers the path
tracer supports the following special parameters:

.Special parameters understood by the path tracer.
[width="97%",cols="<16%,<26%,>12%,<46%",options="header",]
|===
|Type |Name |Default |Description
|int |lightSamples |all |number of random light samples per path vertex,
per default all light sources are sampled

|int |roulettePathLength |5 |ray recursion depth at which to start
Russian roulette termination

|float |maxContribution |∞ |samples are clamped to this value before
they are accumulated into the framebuffer

|bool |backgroundRefraction |false |allow for alpha blending even if
background is seen through refractive objects like glass
|===

The path tracer requires that <<object_types_material>> are assigned to
<<geometries>>, otherwise surfaces are treated as
completely black.

The path tracer supports <<object_types_volumes>> with multiple
scattering. The scattering albedo can be specified using the
link:#transfer-function[transfer function]. Extinction is assumed to be
spectrally constant.
////
