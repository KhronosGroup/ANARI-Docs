// Copyright 2023 The Khronos Group Inc.
// SPDX-License-Identifier: CC-BY-4.0  

[[object_types_camera]]
=== Camera

Cameras express viewpoint and viewport projection information for rendering a
scene. To create a new camera of given type `subtype` use

[source,cpp]
....
ANARICamera anariNewCamera(ANARIDevice, const char *subtype);
....


All cameras sources accept the following parameters:

.<<api_concepts_parameters, Parameters>> understood by all cameras.
[cols="<20,<14,>10,<30",options="header,unbreakable"]
|===================================================================================================
| Name                   | Type         |          Default | Description
| position               |`FLOAT32_VEC3`|        (0, 0, 0) | position of the camera in world-space
| direction              |`FLOAT32_VEC3`|       (0, 0, -1) | main viewing direction of the camera
| up                     |`FLOAT32_VEC3`|        (0, 1, 0) | up direction of the camera
| imageRegion            |`FLOAT32_BOX2`|\((0, 0), (1, 1)) | region of the sensor in normalized screen-space coordinates
|===================================================================================================

The camera is placed and oriented in the world with `position`,
`direction` and `up`. ANARI uses a right-handed coordinate system.


The region of the camera sensor that is rendered to the image can be
specified in normalized screen-space coordinates with `imageRegion`.
This can be used, for example, to crop the image, to achieve
asymmetrical view frusta, or to horizontally flip the image to view
scenes which are specified in a left-handed coordinate system. Note that
values outside the default range of [0–1] are valid, which is useful to
easily realize overscan or film gate, or to emulate a shifted sensor.


.Additional parameters understood by all cameras with extension `KHR_CAMERA_DEPTH_OF_FIELD`
[cols="<3,<2,>2,<4",options="header,unbreakable"]
|===================================================================================================
| Name                   | Type         |          Default | Description
| apertureRadius         |`FLOAT32`     |                0 | size of the aperture, controls the depth of field
| focusDistance          |`FLOAT32`     |                1 | distance at where the image is sharpest when depth of field is enabled
|===================================================================================================

The extension `KHR_CAMERA_DEPTH_OF_FIELD` indicates that cameras support depth
of field via the `apertureRadius` and `focusDistance` parameters.

.Additional parameters understood by all cameras with extension `KHR_CAMERA_STEREO`.
[cols="<3,<2,>2,<4",options="header,unbreakable"]
|===================================================================================================
| Name                   | Type         | Default | Description
| stereoMode             |`STRING`      |   `none`| possible values: `none`, `left`, `right`, `sideBySide`, `topBottom` (left eye at top half)
| interpupillaryDistance |`FLOAT32`     |  0.0635 | distance between left and right eye when stereo is enabled
|===================================================================================================

The extension `KHR_CAMERA_STEREO` indicates that a renderer permits 3D stereo
rendering, which is enabled by setting `stereoMode` and
`interpupillaryDistance`.

.Additional parameters understood by all cameras with extension `KHR_CAMERA_MOTION_TRANSFORMATION`.
[cols="<3,<2,>2,<4",options="header,unbreakable"]
|===================================================================================================
| Name               | Type                           |    Default | Description
| motion.transform   |`ARRAY1D` of `FLOAT32_MAT4`     |            | uniformly distributed world-space transformations
| motion.scale       |`ARRAY1D` of `FLOAT32_VEC3`     |            | uniformly distributed scale, overridden by `motion.transform`
| motion.rotation    |`ARRAY1D` of `FLOAT32_QUAT_IJKW`|            | uniformly distributed quaternion rotation, overridden by `motion.transform`
| motion.translation |`ARRAY1D` of `FLOAT32_VEC3`     |            | uniformly distributed transformlation, overridden by `motion.transform`
| time               |`FLOAT32_BOX1`                  |     [0, 1] | time associated with first and last key in `motion.pass:[*]` arrays
|===================================================================================================

Extension `KHR_CAMERA_MOTION_TRANSFORMATION`: Uniformly (in `time`) distributed
transformation keys can be set with `motion.transform` to achieve camera motion
blur (in combination with extension `KHR_CAMERA_SHUTTER`). Alternatively, the
transformation keys can also be given as decomposed `motion.scale`,
`motion.rotation` and `motion.translation`.

.Additional parameters understood by all cameras with extension `KHR_CAMERA_SHUTTER`.
[cols="<3,<2,>2,<4",options="header,unbreakable"]
|===================================================================================================
| Name               | Type                           |    Default | Description
| shutter            |`FLOAT32_BOX1`                  | [0.5, 0.5] | start and end of shutter time, clamped to [0, 1]
|===================================================================================================

.Additional parameters understood by all cameras with extension `KHR_CAMERA_ROLLING_SHUTTER`.
[cols="<3,<2,>2,<4",options="header,unbreakable"]
|===================================================================================================
| Name                   | Type         | Default | Description
| rollingShutterDirection|`STRING`      |   `none`| rolling direction of the shutter, possible values: `none`, `left`, `right`, `down`, `up`
| rollingShutterDuration |`FLOAT32`     |       0 | the “open” time per line, clamped to [0, shutter.upper-shutter.lower]
|===================================================================================================

The extension `KHR_CAMERA_ROLLING_SHUTTER` depends on extension `KHR_CAMERA_SHUTTER`.


[[object_types_camera_perspective]]
==== Perspective

Extension: `KHR_CAMERA_PERSPECTIVE`

The perspective camera represents a simple thin lens camera for
perspective rendering. It is created by passing the type string
`perspective` to <<object_types_camera, `anariNewCamera`>>. In addition to the
<<object_types_camera, general parameters>> understood by all cameras the
perspective camera supports the special parameters listed in the table
below.

.Additional <<api_concepts_parameters, parameters>> understood by the perspective <<object_types_camera, camera>>.
[cols="<,<,>,<4",options="header,unbreakable"]
|===================================================================================================
| Name   | Type    |  Default | Description
| fovy   |`FLOAT32`|   {pi}/3 | the field of view (angle in radians) of the frame’s height
| aspect |`FLOAT32`|        1 | ratio of width by height of the frame (and image region)
| near |`FLOAT32`|         | near clip plane distance
| far |`FLOAT32`|         | far clip plane distance
|===================================================================================================

Note that when computing the `aspect` ratio a potentially set image
region (using `imageRegion`) needs to be regarded as well.

If `near` and/or `far` are explicitly set they need to fulfill 0 < `near` < `far`. If they
are not set they are determined by the renderer.

[NOTE]
.Note
====
Some rasterization based rendering algorithms intrinsically require near and far planes. The choice of these may also affect depth precision. By default ANARI devices using such algorithms will try to determine appropriate values from the scene contents and internal heuristics.
When the algorithm does not require clip planes and `near`/`far` are not set it may opt to perform no clipping (effectively setting them to 0 and infinity).
====

[[object_types_camera_omnidirectional]]
==== Omnidirectional

Extension: `KHR_CAMERA_OMNIDIRECTIONAL`

The omnidirectional camera captures the complete surrounding
It is is created by passing the type string
`omnidirectional` to <<object_types_camera, `anariNewCamera`>>. It is placed and oriented in the
scene by using the <<object_types_camera, general parameters>> understood by all
cameras.

.Additional <<api_concepts_parameters, parameters>> understood by the omnidirectional <<object_types_camera, camera>>.
[cols="<,<,>2,<4",options="header,unbreakable"]
|===================================================================================================
| Name   | Type   |         Default | Description
| layout |`STRING`|`equirectangular`| pixel layout, possible values: `equirectangular`
|===================================================================================================
//TODO:, `cube` name 'projection'? describe cube layout
//with a latitude / longitude mapping and thus the rendered images should best have a ratio of 2:1.

The image content outside of [0–1] of `imageRegion` is undefined for the
omnidirectional camera.

[[object_types_camera_orthographic]]
==== Orthographic

Extension: `KHR_CAMERA_ORTHOGRAPHIC`

The orthographic camera represents a simple camera with orthographic
projection. It is created by passing the type string `orthographic` to
<<object_types_camera, `anariNewCamera`>>. In addition to the <<object_types_camera, general parameters>>
understood by all cameras the orthographic camera supports the following
special parameters:

.Additional <<api_concepts_parameters, parameters>> understood by the orthographic <<object_types_camera, camera>>.
[cols="<,<,>,<4",options="header,unbreakable"]
|===================================================================================================
| Name   | Type    |  Default | Description
| aspect |`FLOAT32`|        1 | ratio of width by height of the frame (and image region)
| height |`FLOAT32`|        1 | height of the image plane in world units
| near |`FLOAT32`|         | near clip plane distance
| far |`FLOAT32`|         | far clip plane distance
|===================================================================================================

Note that when computing the `aspect` ratio a potentially set image
region (using `imageRegion`) needs to be regarded as well.

If `near` and/or `far` are explicitly set they need to fulfill 0 ≤ `near` < `far`. If they
are not set they are determined by the renderer.

[NOTE]
.Note
====
Some rasterization based rendering algorithms intrinsically require near and far planes. The choice of these may also affect depth precision. By default ANARI devices using such algorithms will try to determine appropriate values from the scene contents and internal heuristics.
When the algorithm does not require clip planes and `near`/`far` are not set it may opt to perform no clipping (effectively setting them to 0 and infinity).
====

