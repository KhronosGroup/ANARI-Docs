// Copyright 2023 The Khronos Group Inc.
// SPDX-License-Identifier: CC-BY-4.0  

[[object_types_frame]]
=== Frame

The frame contains all the objects necessary to render and holds the resulting
rendered 2D image (and optionally auxiliary information associated with pixels).
To create a new frame, use

[source,cpp]
....
ANARIFrame anariNewFrame(ANARIDevice);
....

The frame uses parameters to encode size, color format, and which
channels to use. Channels are identified by string channel names beginning with `channel.`. The frame
object has an identically named parameter for each reported channel. Setting these parameters
to one of the allowed data types enables the channel and determines the data type it can be
mapped as. The same channel names are used to map the channel contents with `anariMapFrame`. Each
channel has its own associated extension name.

.<<api_concepts_parameters, Parameters>> understood by the frame.
[cols="<2,<2,<5",options="header,unbreakable"]
|===================================================================================================
| Name     | Type         | Description
| world    |`WORLD`       | required world to be rendered
| camera   |`CAMERA`      | required camera used to render the world
| renderer |`RENDERER`    | required renderer which renders the frame
| size     |`UINT32_VEC2` | required size of the frame in pixels (width {times} height)
| accumulation |`BOOL` |  `FALSE` | whether additional internal buffers are created to potentially improve the image
                                    quality when multiple subsequent calls to `anariRenderFrame` are made (extension
                                    <<extension_frame_accumulation, `KHR_FRAME_ACCUMULATION`>>)
|===================================================================================================

The `world`, `camera`, `renderer`, and `size` parameters are required, `size`
must be positive.

[[frame_channels]]
.Frame channel enabling parameters and their associated extension names.
[cols="<,<,<,<5",options="header,unbreakable"]
|===================================================================================================
| Name             | Type        | Extension                  | Description
| channel.color    |`DATA_TYPE`  |                            | enable mapping the `color` channel and specify its observable type;
                                                                RGB color including alpha;
                                                                possible values: `UFIXED8_VEC4`, `UFIXED8_RGBA_SRGB`, `FLOAT32_VEC4`
| channel.depth    |`DATA_TYPE`  |                            | enable mapping the `depth` channel and specify its observable type;
                                                                euclidean distance to the camera (_not_ to the image plane), for multiple
                                                                samples per pixel their minimum is taken;
                                                                possible values: `FLOAT32`
| channel.normal   |`DATA_TYPE`  | `KHR_FRAME_CHANNEL_NORMAL` | enable mapping the `normal` channel and specify its observable type;
                                                                average world-space normal of the first hit;
                                                                possible values: `FIXED16_VEC3`, `FLOAT32_VEC3`
| channel.albedo   |`DATA_TYPE`  | `KHR_FRAME_CHANNEL_ALBEDO` | enable mapping the `albedo` channel and specify its observable type;
                                                                average material albedo (color without illumination) at the first hit;
                                                                possible values: `UFIXED8_VEC3`, `UFIXED8_RGB_SRGB`, `FLOAT32_VEC3`
| channel.primitiveId |`DATA_TYPE` | `KHR_FRAME_CHANNEL_PRIMITIVE_ID` | enable mapping the `primitiveId` channel and specify its
                                                                        observable type; `primitiveId` attribute of the first hit;
                                                                        possible values: `UINT32`
| channel.objectId    |`DATA_TYPE` | `KHR_FRAME_CHANNEL_OBJECT_ID`    | enable mapping the `objectId` channel and specify its
                                                                        observable type; user defined <<object_types_surface>> /
                                                                        <<object_types_volume>> `id`, if specified, or index in
                                                                        <<object_types_group>> of first hit; possible values: `UINT32`
| channel.instanceId  |`DATA_TYPE` | `KHR_FRAME_CHANNEL_INSTANCE_ID`  | enable mapping the `instanceId` channel and specify its
                                                                        observable type; user defined <<object_types_instance>> `id`,
                                                                        if specified, or instance index of first hit;
                                                                        possible values: `UINT32`
|===================================================================================================

[[extension_frame_accumulation]]
The extension `KHR_FRAME_ACCUMULATION` indicates that implementations use
progressive rendering techniques like Monte Carlo integration and thus that
multiple subsequent calls to <<rendering_frames, `anariRenderFrame`>> without
changes to <<object_types_frame>> improve the image quality (e.g., reduce noise
levels).

The following information can be queried as properties on the `ANARIFrame`
<<api_concepts_object_properties, using `anariGetProperty`>>.

.Properties queryable on frames.
[cols="<2,<,^,<4",options="header,unbreakable"]
|===============================================================================================================================
| Name               | Type    | Required | Description
| duration           |`FLOAT32`| Yes      | time (in seconds) between start and completion of the frame
| renderProgress     |`FLOAT32`| No       | progress of the current frame task since the last call to `anariRenderFrame`, in [0..1]
| refinementProgress |`FLOAT32`| No       | progress of frame refinement when using <<extension_frame_accumulation, `KHR_FRAME_ACCUMULATION`>> renderers, in [0..1]
|===============================================================================================================================

[[extension_frame_completion_callback]]
Devices which implement extension `KHR_FRAME_COMPLETION_CALLBACK` add two
parameters to <<object_types_frame>>: a callback invoked as a continuation after
the frame completes, and an associated pointer to application state to be passed
to the invoked continuation. This continuation must be complete before returning
from `anariFrameReady()` when called with `ANARI_WAIT`.

The signature of the continuation is provided in `anari.h` as

[source,cpp]
....
typedef void (*ANARIFrameCompletionCallback)(const void *userPtr, ANARIDevice, ANARIFrame);
....

.Additional parameters understood by the frame with extension `KHR_FRAME_COMPLETION_CALLBACK`.
[cols="<11,<9,<10",options="header,unbreakable"]
|===================================================================================================
| Name                            | Type                      | Description
| frameCompletionCallback         |`FRAME_COMPLETION_CALLBACK`| callback to invoke as continuation when the rendered frame is complete
| frameCompletionCallbackUserData |`VOID_POINTER`             | optional user pointer passed as the first argument of the frame completion callback
|===================================================================================================

[NOTE]
.Note
==================
Implementations are strongly encouraged to invoke the continuation on a
background thread. This helps physically maintain asynchronous behavior with
calling application API threads. ANARI API calls are legal within the
continuation, except for calling `anariFrameReady()` with `ANARI_WAIT`, as
this will incur a deadlock.
==================
