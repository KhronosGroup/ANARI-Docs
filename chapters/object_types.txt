// Copyright (c) 2021 Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[object_types]]
== Object Types and Subtypes

This section describes the object types (and subtypes where available) which are
used to compose a scene in ANARI and which are involved in rendering it.

// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////

include::object_types/frame.txt[]

include::object_types/cameras.txt[]

// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////

[[object_types_renderer]]
=== Renderer

A renderer is the central object for rendering in ANARI. Different
renderers implement different features, rendering algorithms, and support
different materials. To create a new renderer of given subtype `subtype` use

[source,cpp]
....
ANARIRenderer anariNewRenderer(ANARIDevice, const char *subtype);
....

Every ANARI device offers a default renderer, which works without
setting any parameters (i.e., all parameters, if any, have meaningful
defaults). Thus, passing `default` as
subtype string to anariNewRenderer will result in a
usable renderer. Further renderers and their parameters can be
enumerated with the <<api_concepts_introspection>> API. The default
renderer is an alias to an existing renderer that is returned first in
the list by `anariGetObjectSubtypes` when queried for `RENDERER`. Also
refer to the documentation of ANARI implementations.

Feature support information can be queried as properties on the `ANARIRenderer`
<<api_concepts_object_properties, using `anariGetProperty`>>.

.Properties queryable on all renderers.
[cols="<2,<3,^2,<8",options="header,unbreakable"]
|===================================================================================================
| Name    | Type          | Required | Description
| feature | `STRING_LIST` | Yes      | list of supported features
|===================================================================================================


Feature: `KHR_RENDERER_VOLUME_METHOD`

.Parameters understood by renderers with feature `KHR_RENDERER_VOLUME_METHOD`.
[cols="<,<,>,<3",options="header,unbreakable"]
|===================================================================================================
| Name   | Type   | Default | Description
| method |`STRING`| raycast | the volume rendering technique, possible values: raycast, splatting, shear-warp, texture 
|===================================================================================================

Feature: `KHR_RENDERER_BACKGROUND_COLOR`

.Parameters understood by renderers with feature `KHR_RENDERER_BACKGROUND_COLOR`.
[cols="<,<,>,<3",options="header,unbreakable"]
|===================================================================================================
| Name       | Type         |      Default | Description
| background |`FLOAT32_VEC4`| (0, 0, 0, 1) | the background color
|===================================================================================================

Feature: `KHR_RENDERER_BACKGROUND_IMAGE`

.Parameters understood by renderers with feature `KHR_RENDERER_BACKGROUND_IMAGE`.
[cols="<,<,>,<3",options="header,unbreakable"]
|===================================================================================================
| Name       | Type         |      Default | Description
| background |`ARRAY2D` of <<color>> |  | the background image
|===================================================================================================

The background image will be rescaled to the size of the <<Frame>> by linear filtering.

If both `KHR_RENDERER_BACKGROUND_COLOR` and `KHR_RENDERER_BACKGROUND_IMAGE` are supported the `background` parameter can accept either type.

Feature: `KHR_RENDERER_AMBIENT_LIGHT`

The ambient light is a light with an invisible source which surrounds the scene and illuminates it from infinity.

.Parameters understood by renderers with feature `KHR_RENDERER_AMBIENT_LIGHT`.
[cols="<,<,>,<3",options="header,unbreakable"]
|===================================================================================================
| Name       | Type         |      Default | Description
| ambientColor | `FLOAT32_VEC3` | (1, 1, 1) | ambient light color
| ambientRadiance | `FLOAT32` | 0 | the amount of light emitted by a point on the ambient light source in a direction, in W/sr/m^2^
|===================================================================================================


// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////

[[object_types_world]]
=== World

Worlds are a container of scene data represented by
<<instance, instances>>. Worlds are created with

[source,cpp]
....
ANARIWorld anariNewWorld(ANARIDevice);
....

Objects are placed in the world through an array of instances, geometries,
volumes, or lights. Similar to <<instance, instances>>, each array of objects
is optional; there is no need to create empty arrays if there are no instances
(though there might be nothing to render).

.Parameters understood by the world.
[cols="<,<,<2",options="header,unbreakable"]
|===================================================================================================
| Name     | Type                  | Description
| instance |`ARRAY1D` of `INSTANCE`| optional array with handles of <<Instance, instances>>
| surface  |`ARRAY1D` of `SURFACE` | optional array with handles of <<Surface, surfaces>>
| volume   |`ARRAY1D` of `VOLUME`  | optional array with handles of <<Volume, volumes>>
| light    |`ARRAY1D` of `LIGHT`   | optional array with handles of <<Light, lights>>
|===================================================================================================

.Properties supported by the world.
[cols="<,<,<2",options="header,unbreakable"]
|===================================================================================================
| Name     | Type         | Description
| bounds   |`FLOAT32_BOX3`| axis-aligned bounding box in world-space (excluding the lights)
|===================================================================================================

// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////

[[object_types_instance]]
=== Instance

Instances apply transforms to groups for placement in the World.
Instances are created with

[source,cpp]
....
ANARIInstance anariNewInstance(ANARIDevice);
....

Instances take an array of <<group>> representing all the objects which share the
instances world-space transform.

.Parameters understood by instances.
[cols="<,<,>,<3",options="header,unbreakable"]
|===================================================================================================
| Name      | Type         |                                       Default | Description
| group     |`GROUP`       |                                               | Group to be instanced, required
| transform |`FLOAT32_MAT4`| \((1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1)) | world-space transformation matrix for all attached objects
                                                                             (overridden by  `motion.transform`, feature `KHR_TRANSFORMATION_MOTION_BLUR`)
| id        |`UINT32`     |                                            -1u | optional user Id, for <<object_types_frame>> channel `instanceId`
|===================================================================================================

The matrix `transform` represents an affine transformation which is
applied to homogeneous coordinates.

[NOTE]
.Note
====
Since the `FLOAT32_MAT4` matrix `transform` is in column-major layout
the translational part of the affine transformation is the 13th to 15th
float in memory. Implementations are free to always treat the last row
(4th, 8th, 12th and 16th float) as being (0, 0, 0, 1).
====

.Properties supported by instances.
[cols="<,<,<2",options="header,unbreakable"]
|===================================================================================================
| Name     | Type         | Description
| bounds   |`FLOAT32_BOX3`| axis-aligned bounding box in world-space (excluding the lights)
|===================================================================================================

Feature `KHR_TRANSFORMATION_MOTION_BLUR`: Uniformly (in `time`) distributed
transformation keys can be given with `motion.transform` to achieve
transformation motion blur (in combination with `time` and `shutter`).
Alternatively, the transformation keys can also be given as decomposed
`motion.scale`, `motion.rotation` and `motion.translation`. <<cameras, Camera>>
`shutter` also needs to be set appropiately.

.Additional parameters understood by instances with feature `KHR_TRANSFORMATION_MOTION_BLUR`.
[cols="<2,<2,>,<5",options="header,unbreakable"]
|===================================================================================================
| Name               | Type                           | Default | Description
| motion.transform   |`ARRAY1D` of `FLOAT32_MAT4`     |         | additional uniformly distributed world-space transformations
| motion.scale       |`ARRAY1D` of `FLOAT32_VEC3`     |         | additional uniformly distributed scale, overridden by `motion.transform`
| motion.rotation    |`ARRAY1D` of `FLOAT32_QUAT_IJKW`|         | additional uniformly distributed quaternion rotation, overridden by `motion.transform`
| motion.translation |`ARRAY1D` of `FLOAT32_VEC3`     |         | additional uniformly distributed transformlation, overridden by `motion.transform`
| time               |`FLOAT32_BOX1`                  |  [0, 1] | time associated with first and last key in `motion.pass:[*]` arrays
|===================================================================================================

// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////

[[object_types_group]]
=== Group

Groups in ANARI represent collections of <<surface>>, <<volume>>, and <<light>>
which share a common local-space coordinate system. Groups are created
with

[source,cpp]
....
ANARIGroup anariNewGroup(ANARIDevice);
....

Each array on a group is optional; there is no need to create empty arrays if
there are no surfaces, no volumes, or no lights instanced.

.Parameters understood by groups.
[cols="<,<,<2",options="header,unbreakable"]
|======================================================================================
| Name    | Type                 | Description
| surface |`ARRAY1D` of `SURFACE`| optional array with handles of <<Surface, surfaces>>
| volume  |`ARRAY1D` of `VOLUME` | optional array with handles of <<Volume, volumes>>
| light   |`ARRAY1D` of `LIGHT`  | optional array with handles of <<Light, lights>>
|======================================================================================

.Properties supported by groups.
[cols="<,<,<2",options="header,unbreakable"]
|===================================================================================================
| Name     | Type         | Description
| bounds   |`FLOAT32_BOX3`| axis-aligned bounding box (excluding the lights)
|===================================================================================================

// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////

include::object_types/lights.txt[]

// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////

[[object_types_surface]]
=== Surface

Geometries are matched with appearance information through Surfaces. These take
a geometry, which defines the spatial representation, and applies either
full-object or per-primitive color and material information. Surfaces are
created with

[source,cpp]
....
ANARISurface anariNewSurface(ANARIDevice);
....

.Parameters understood by Surface.
[cols="<,<,<2",options="header,unbreakable"]
|===================================================================================================
| Name     |Type      | Description
| geometry |`GEOMETRY`| <<object_types_geometry>> object used by this surface
| material |`MATERIAL`| <<object_types_material>> applied to the geometry
| id       |`UINT32`  | optional user Id, for <<object_types_frame>> channel `objectId`, default -1u
|===================================================================================================

Surfaces require a valid <<object_types_geometry>> to be set as the `geometry` parameter and
a valid <<object_types_material>> to be set as the `material` parameter.

// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////

include::object_types/geometries.txt[]

include::object_types/samplers.txt[]

include::object_types/materials.txt[]

include::object_types/volumes.txt[]

include::object_types/spatial_fields.txt[]

// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////

[[object_types_extension_objects]]
=== Extension Objects

Extensions may need to introduce custom object types. To create such an object use

[source,cpp]
....
ANARIObject anariNewObject(ANARIDevice, const char *type, const char *subtype);
....

Consult the extension documentation for supported `type` and `subtype` values.
