// Copyright 2023 The Khronos Group Inc.
// SPDX-License-Identifier: CC-BY-4.0  

[[object_types]]
== Object Types and Subtypes

This section describes the object types (and subtypes where available) which are
used to compose a scene in ANARI and which are involved in rendering it.

// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////

include::object_types/frame.txt[]

include::object_types/cameras.txt[]

// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////

[[object_types_renderer]]
=== Renderer

[[anariNewRenderer]]
A renderer is the central object for rendering in ANARI. Different
renderers implement different extensions, rendering algorithms, and support
different materials. To create a new renderer of given subtype `subtype` use

[source,cpp]
....
ANARIRenderer anariNewRenderer(ANARIDevice, const char *subtype);
....

Every ANARI device offers a default renderer, which works without
setting any parameters (i.e., all parameters, if any, have meaningful
defaults). Thus, passing `default` as
subtype string to anariNewRenderer will result in a
usable renderer. Further renderers and their parameters can be
enumerated with the <<api_concepts_introspection>> API. The default
renderer is an alias to an existing renderer that is returned first in
the list by `anariGetObjectSubtypes` when queried for `RENDERER`. Also
refer to the documentation of ANARI implementations.

Extension support information can be queried as properties on the `ANARIRenderer`
<<api_concepts_object_properties, using `anariGetProperty`>>.

.<<api_concepts_object_properties, Properties>> queryable on a renderer.
[cols="<,<,^,<4",options="header,unbreakable"]
|===================================================================================================
| Name    | Type          | Required | Description
| extension | `STRING_LIST` | Yes      | list of supported extensions
|===================================================================================================


[[extension_renderer]]
Even though renderers (and their parameters) are highly implementation specific,
some typical parameters are specified by the following extensions.

.<<api_concepts_parameters, Parameters>> understood by some renderers.
[cols="<3,<3,>2,<8",options="header,unbreakable"]
|===================================================================================================
| Name            | Type         |      Default | Description
| background      |`FLOAT32_VEC4`| (0, 0, 0, 1) | extension `KHR_RENDERER_BACKGROUND_COLOR`, the background color
| background      |`ARRAY2D` of <<color>> |     | extension `KHR_RENDERER_BACKGROUND_IMAGE`, the background image, rescaled to the size of the <<Frame>> by linear filtering
| ambientColor    |`FLOAT32_VEC3`|    (1, 1, 1) | extension `KHR_RENDERER_AMBIENT_LIGHT`, ambient light color
| ambientRadiance |`FLOAT32`     |            0 | extension `KHR_RENDERER_AMBIENT_LIGHT`, the amount of light emitted by a point on the ambient light source in a direction, in W/sr/m^2^
|===================================================================================================

If both `KHR_RENDERER_BACKGROUND_COLOR` and `KHR_RENDERER_BACKGROUND_IMAGE` are
supported the `background` parameter can accept either type.

The ambient light is a light with an invisible source which surrounds the scene
and illuminates it from infinity.


// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////

[[object_types_world]]
=== World

[[anariNewWorld]]
Worlds are a container of scene data represented by
<<instance, instances>>. Worlds are created with

[source,cpp]
....
ANARIWorld anariNewWorld(ANARIDevice);
....

Objects are placed in the world through an array of instances, geometries,
volumes, or lights. Similar to <<instance, instances>>, each array of objects
is optional; there is no need to create empty arrays if there are no instances
(though there might be nothing to render).

.<<api_concepts_parameters, Parameters>> understood by the world.
[cols="<,<2,<4",options="header,unbreakable"]
|===================================================================================================
| Name     | Type                  | Description
| instance |`ARRAY1D` of `INSTANCE`| optional array with handles of <<Instance, instances>>
| surface  |`ARRAY1D` of `SURFACE` | optional array with handles of <<Surface, surfaces>>
| volume   |`ARRAY1D` of `VOLUME`  | optional array with handles of <<Volume, volumes>>
| light    |`ARRAY1D` of `LIGHT`   | optional array with handles of <<Light, lights>>
|===================================================================================================

.<<api_concepts_object_properties, Properties>> queryable on a world.
[cols="<,<,<4",options="header,unbreakable"]
|===================================================================================================
| Name     | Type         | Description
| bounds   |`FLOAT32_BOX3`| axis-aligned bounding box in world-space (excluding the lights)
|===================================================================================================

// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////

include::object_types/instances.txt[]

// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////

[[object_types_group]]
=== Group

[[anariNewGroup]]
Groups in ANARI represent collections of <<surface>>, <<volume>>, and <<light>>
which share a common local-space coordinate system. Groups are created
with

[source,cpp]
....
ANARIGroup anariNewGroup(ANARIDevice);
....

Each array on a group is optional; there is no need to create empty arrays if
there are no surfaces, no volumes, or no lights instanced.

.<<api_concepts_parameters, Parameters>> understood by groups.
[cols="<,<2,<4",options="header,unbreakable"]
|======================================================================================
| Name    | Type                 | Description
| surface |`ARRAY1D` of `SURFACE`| optional array with handles of <<Surface, surfaces>>
| volume  |`ARRAY1D` of `VOLUME` | optional array with handles of <<Volume, volumes>>
| light   |`ARRAY1D` of `LIGHT`  | optional array with handles of <<Light, lights>>
|======================================================================================

.<<api_concepts_object_properties, Properties>> queryable on a group.
[cols="<,<,<4",options="header,unbreakable"]
|===================================================================================================
| Name     | Type         | Description
| bounds   |`FLOAT32_BOX3`| axis-aligned bounding box (excluding the lights)
|===================================================================================================

// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////

include::object_types/lights.txt[]

// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////

[[object_types_surface]]
=== Surface

[[anariNewSurface]]
Geometries are matched with appearance information through Surfaces. These take
a geometry, which defines the spatial representation, and applies either
full-object or per-primitive color and material information. Surfaces are
created with

[source,cpp]
....
ANARISurface anariNewSurface(ANARIDevice);
....

.<<api_concepts_parameters, Parameters>> understood by Surface.
[cols="<,<,>,<5",options="header,unbreakable"]
|===================================================================================================
| Name     | Type     | Default | Description
| geometry |`GEOMETRY`|         | <<object_types_geometry>> object used by this surface
| material |`MATERIAL`|         | <<object_types_material>> applied to the geometry
| id       |`UINT32`  |     -1u | <<frame_channels, extension `KHR_FRAME_CHANNEL_OBJECT_ID`>>, optional user Id, for frame <<frame_channels, channel `objectId`>>
|===================================================================================================

Surfaces require a valid <<object_types_geometry>> to be set as the `geometry` parameter and
a valid <<object_types_material>> to be set as the `material` parameter.

// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////

include::object_types/geometries.txt[]

include::object_types/samplers.txt[]

include::object_types/materials.txt[]

include::object_types/volumes.txt[]

include::object_types/spatial_fields.txt[]

// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////

[[object_types_extension_objects]]
=== Extension Objects

[[anariNewObject]]
Extensions may need to introduce custom object types. To create such an object use

[source,cpp]
....
ANARIObject anariNewObject(ANARIDevice, const char *type, const char *subtype);
....

Consult the extension documentation for supported `type` and `subtype` values.
