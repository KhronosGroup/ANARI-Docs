// Copyright (c) 2021 Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[api_choices]]
== API Design Choices

Here we outline several fundamental ANARI API design choices that address key
goals of broad application and programming language support, and ease of
application development, integration, testing, and distribution.

[[api_choices_c99]]
=== C99

The ANARI API is specified as a C99 API in order to provide
compiler-independent linkage, thereby supporting easy integration into a
broad range of applications based on a variety of compiled languages,
including C, pass:[C++], Fortran, and dynamic languages such as Python and
Julia, among others. C99 provides improved IEEE-754 floating point rounding
behavior, integer types in common with pass:[C++], and other refinements
relative to ANSI C.

[[api_choices_library]]
=== Common Front-end Library

ANARI is specified as a common API header and front-end library (using either
static or dynamic linkage) capable of loading available ANARI back-end device
implementations at runtime, known as <<api_concepts_devices, _devices_>>.
ANARI back-end devices are created by standard implementors and are expected
to be distributed, installed, or upgraded independently of the standard API
header and front-end library.


[[api_choices_objects]]
=== Opaque Objects, Parameterization, and Properties

The ANARI API is designed to encapsulate scene data and rendering operations
as opaque object handles using string-value pairs to parameterize them. This
facilitates a dominantly unidirectional flow of scene information from the
application to the instantiated ANARI device. As a result, the vast majority of
ANARI API calls have a write-only behavior pattern to minimize imposed
implementation requirements.

An application can create ANARI objects and set named inputs on them called
_parameters_. However, no mechanism is provided to subsequently query
parameter data, since even the existence of a query mechanism
would impose additional performance and storage restrictions for back-end
renderer implementations (e.g. distributed rendering contexts).
<<api_concepts_introspection, Object introspection>> can be used to query object
subtypes and information about their parameters.

Additionally, ANARI objects can publish named outputs called _properties_. Such
output is specific to the type and semantics of the object, but has a generic
interface function for access.


[[api_choices_extensions]]
=== Extensions and Extensions

The ANARI specification defines a set of usable extensions exposed via the C API.
Extensions are loosely defined as observable behavior from a particular use of
the ANARI API. This most commonly is the existence of usable object subtypes,
but also can be pre/post conditions on a function call, specific behavior of an
object parameter, or guaranteed availability of a property.

Applications can query extensions made available by a device implementation
through queries either on the library or the live device instance. Querying
available extensions via the library represents the list of extensions implemented
by the vendor at all, while querying extensions on a live device instance will
also factor in the runtime environment (i.e. available underlying hardware to
the device). In either case, extension queries are intended to be the way an
application determines if the device is acceptable in meeting the application's
requirements, or if the application wants to adapt itself to what extensions are
available.

Extensions are extensions that have not yet made it into the ANARI specification.
These extensions are reported in the same list as core extensions, but have vendor
specific names, which may exist in more than one device from that vendor.
This is a good way for vendors to agree upon and get experience with a extension
prior to bring it officially into the specification.

All extensions represent functionality which provides additional capabilities to
the application. A reported extension should never represent a reduction in
capability.

Testable extension names are inlined in the specification alongside their
definition. All extensions follow the prefix convention of
`ANARI\_[VENDOR]_[NAME]`, where core extensions use `KHR` as the vendor string. In
this document, all extensions will omit the `ANARI_` portion of the prefix for
brevity.

[[api_choices_distributed_rendering]]
=== Support for Distributed Applications (Informative)

ANARI is designed to be compatible with applications which are distributed
across multiple processes which may reside on multiple machines. ANARI
implementors provide distributed rendering capabilities using existing API
semantics relevant to running in distributed environments, such as multiple
processes invoking API calls in lock-step.

[NOTE]
.Note
====
Interoperability with underlying
networking APIs, such as MPI, are expected to be documented by the vendor.
====
