// Copyright (c) -2021 Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[core_extensions]]
== Core Extensions

This section describes the core extensions which ANARI specifies.
The various ANARI implementing devices may or may not support any of the
features described here.
Applications can check whether a specific feature is supported after
initializing a device by calling.

[source,cpp]
....
int anariDeviceImplements(ANARIDevice, const char *extension);
....

Where `extension` is a string name of the extension. Preprocessor defines are
also declared in the `anari_enums.h` with a value for each of the features describe
here.


[[feature_continuations]]
=== Frame Completion Callback

Devices which implement `ANARI_KHR_FRAME_COMPLETION_CALLBACK` add two parameters
to <<frame>>: a callback invoked as a continuation after the frame completes,
and an associated pointer to application state to be passed to the invoked
continuation. This continuation must complete before the `ANARI_TASK_COMPLETE`
event is signaled by `anariWait()` on the frame.

The signature of the continuation is provided in `anari.h` as

[source,cpp]
....
typedef void (*ANARIFrameCompletionCallback)(const void *userPtr, ANARIDevice, ANARIFrame);
....


[NOTE]
.Note
==================
Implementations are strongly encouraged to invoke the continuation on a
background thread. This helps physically maintain asynchronous behavior with calling
application API threads. ANARI API calls are legal within the continuation,
except for calling `anariWait()` with `ANARI_TASK_COMPLETE`, as this will incur a
deadlock.
==================


[[feature_area_lights]]
=== Area Lights

The extension `ANARI_KHR_AREA_LIGHTS` indicates that implementations support
spatially extended <<standard_subtypes_lights>> and thus potentially soft
shadows.


[[feature_relaxed_device_synchronization]]
=== Relaxed Device Synchronization

Devices that implement `ANARI_KHR_DEVICE_SYNCHRONIZATION` relax
synchronization requirements by
excluding the device from the <<api_choices_thread_safety,external
synchronization requirement>> if the device is passed as the first argument
only. Calls that are operating on the device as the object must still be
synchronized with all other calls involving the same device. Likewise
`anariRenderFrame` must be synchronized with all other ANARI calls as well. This
only applies to the `anariRenderFrame` call itself, not the asynchronous render
operations which remain subject to
<<api_choices_asynchronous_operations,asynchronous rendering restrictions>> as
before.

This lowers the scope of required synchonization to individual ANARI objects
allowing different threads to operate concurrently on different objects within
the same device.


[[feature_transformation_motion_blur]]
=== Transformation Motion Blur

The extension `ANARI_KHR_TRANSFORMATION_MOTION_BLUR` indicates that
implementations support motion blur via time-varying transformations on
<<instance, instances>> and <<standard_subtypes_cameras, cameras>>.


[[feature_aux_buffers]]
=== Auxiliary Buffers

The extension `ANARI_KHR_AUXILIARY_BUFFERS` indicates that implementations support
additional albedo and normal buffers on the <<frame>> which can be mapped.


[[feature_stochastic_rendering]]
=== Stochastic Rendering

The extension `ANARI_KHR_STOCHASTIC_RENDERING` indicates that implementations
use stochastic rendering techniques like Monte Carlo integration and thus that
multiple subsequent calls to <<rendering_frames, `anariRenderFrame`>> without
changes to <<frame>> improve the image quality (e.g., reduce noise levels).
Additional properties can be queried on <<frame>>.


[[feature_array1d_region]]
=== Array1D Region

The extension `ANARI_KHR_ARRAY1D_REGION` indicates that implementations support
using a parameter on <<api_concepts_memory, `ANARIArray1D`>> to modify the valid
region of elements use by parent objects to the array.
