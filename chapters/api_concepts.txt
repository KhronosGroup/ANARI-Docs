// Copyright 2023 The Khronos Group Inc.
// SPDX-License-Identifier: CC-BY-4.0

[[api_concepts]]
== Common API Concepts

This section describes concepts common to all object types for creation,
parameterization, and property queries.

[[api_concepts_thread_safety]]
=== Thread Safety, Asynchronous Operations

The ANARI API may be called from any thread but calls that share objects
must be synchronized and may not overlap. By default, this includes the device.
Therefore, calls to the same device must be externally synchronized.

Expensive operations can be implemented asynchronously, which avoids blocking
the calling application. Each asynchronous operation is specified as to what
API calls are legal to make while the operation has not yet completed.

[NOTE]
.Note
====
Making some operations asynchronous complements the thread safety of ANARI, and
typically is used for a different purpose. Where a multithreaded application
may be trying to work on constructing a scene (which could be many smaller
ANARI API calls) while another scene is being rendered in parallel,
asynchronous rendering focuses on removing the need for long running
operations to cause an application to use multithreading just to avoid
blocking on ANARI.
====

Devices that implement extension `KHR_DEVICE_SYNCHRONIZATION` relax
synchronization requirements by excluding the device from the external
synchronization requirement if the device is passed as the first argument only.
Calls that are operating on the device as the object must still be synchronized
with all other calls involving the same device. Likewise `anariRenderFrame` must
be synchronized with all other ANARI calls as well. This only applies to the
`anariRenderFrame` call itself, not the asynchronous render operations which
remain subject to asynchronous rendering restrictions.

This lowers the scope of required synchronization to individual ANARI objects
allowing different threads to operate concurrently on different objects within
the same device.


[[api_concepts_scene_hierarchy]]
=== Scene Hierarchy (Informative)

ANARI scenes are represented as hierarchies of objects. This section
describes their relationship to each other.

The <<object_types_frame>> is the root object of the scene. It holds the
framebuffer configuration and the <<object_types_world>>,
<<object_types_camera>>, and <<object_types_renderer>> objects. The
Camera configures the projection of the rendering used to view
the World. The Renderer holds parameters
relating to the rendering algorithm. The World holds arrays of
the drawable objects of the scene such as <<object_types_surface>>,
<<object_types_volume>>, and <<object_types_light>> either directly or via an
array of <<object_types_instance>> containing <<object_types_group>>. A
Group holds arrays of Surface,
Volume, and Light to be instanced together. An
Instance combines a Group with a transform for
placement of the same collection of objects at multiple locations within the
same World. A Surface represents drawable
surfaces containing a <<object_types_geometry>> and a <<object_types_material>>.
A Geometry specifies drawable primitives and data associated
with them. A Material specifies the surface's appearance
related to the data from the Geometry. A
Volume represents volumetric drawable objects and may contain
<<object_types_spatial_field>> objects. A Spatial Field
represents a field of values in 3D space. A Light represents
sources of illumination.

The following diagram illustrates the relationships described above:

image::images/anari_hierarchy.svg[]

[[api_concepts_object_definition]]
=== Object Definition

All objects are characterized by the following items

- Objects are represented as an <<api_concepts_handles,opaque handle>>
- Objects must be able to accept <<api_concepts_parameters,parameters>>
- Objects must be able to post <<api_concepts_object_properties,properties>>
- An object application reference count must only be modifiable by
`anariRelease` and `anariRetain`


[[api_concepts_handles]]
=== Object Handle Representation

Objects and devices in ANARI are represented by opaque 64-bit handles. The
`NULL` handle never represents a valid object. Handles are only valid for the
device from which they were created, and using handles with other devices leads
to undefined behavior.

[[api_concepts_lifetimes]]
=== Object Creation and Lifetime

Objects are created by calling an `anariNew*` factory function (for example
`anariNewGeometry`). Each object type has its own corresponding factory
function. All objects, including devices, are only valid in the process in which
they are created.

[[anariRelease]][[anariRetain]]
Object lifetime is managed by opaque reference counting. Objects have a
public and internal reference count. Objects are created with a public
reference count of 1, which can be increased with `anariRetain` and
decreased with `anariRelease`. Once the public reference count has been
decreased to 0, the object becomes inaccessible to host code, where using its
handle in subsequent API calls is invalid and results in undefined behavior.

The signatures to `anariRelease` and `anariRetain` are as follows

[source,cpp]
----
void anariRelease(ANARIDevice, ANARIObject);

void anariRetain(ANARIDevice, ANARIObject);
----

Calling `anariRelease` with a `NULL` object-handle for the second
argument is not an error.
The internal reference count is managed by the API and will keep objects
alive for as long as the implementation needs them. Therefore, user code may
release objects as soon as it no longer requires access to them.


[[api_concepts_parameters]]
=== Parameters, Types, and Commits

[[anariSetParameter]]
Objects are configured by parameters, which are identified by a string name and
are set using `anariSetParameter`. Multiple types can be valid for a parameter,
but only one type can be set for a particular parameter name at any given time.
Setting a parameter with a different type overwrites its previous value and
type. Attempting to set a parameter that is unknown to the implementation
has no effect on object state, but may cause an ANARI device implementation
to emit warnings. The same applies if an unsupported type for a parameter is used.

The signatures to `anariSetParameter` is as follows

[source,cpp]
----
void anariSetParameter(
  ANARIDevice,
  ANARIObject,
  const char *parameterName,
  ANARIDataType,
  const void *value
);
----

The `ANARI_STRING` valued parameter named `name` on all object types is reserved
across all implementations and can optionally be used by applications to inject
human readable identifiers into the command stream. This can be useful for
debugging purposes, for example. Implementations are allowed to ignore this
parameter and must not emit warnings when it is present.

[[anariCommitParameters]]
Changes to parameter values must only take effect once `anariCommitParameters`
has been called on the object:

[source,cpp]
----
void anariCommitParameters(ANARIDevice, ANARIObject);
----

Uncommitted parameters must have no effect on the behavior of the object
during rendering operations.

Data types passed to and returned from ANARI are specified using the
`ANARIDataType` enum. The enum values identify ANARI object data types
and C data types. Types starting with `ANARI` are provided by the
ANARI headers. All other types refer to C99 types.
See Table 1 below for a complete list.

Values set on objects are passed as a `void *` in `anariSetParameter`, which
points to the value to be read. The type is encoded by the passed in
`ANARIDataType` enum. For example, this means that, given `ANARI_INT`, the
implementation casts the input `void * value` to `int *` and dereferences it
accordingly. There are, however, two exceptions: `ANARI_STRING` and
`ANARI_VOID_POINTER` (`const char *` and `void *` respectively) are object
pointer based types, so they are instead passed by value.

[[anariUnsetParameter]]
Object parameters can be unset using `anariUnsetParameter`, which returns the
named parameter back to a state as if it had not been set. Just like with
setting parameters, changes made by `anariUnsetParameter` must only be
applied when the object is committed.

The signature to `anariUnsetParameter` is as follows

[source,cpp]
----
void anariUnsetParameter(
  ANARIDevice,
  ANARIObject,
  const char *parameterName
);
----

[[anariUnsetAllParameters]]
Similarly, all parameters on an object can be simultaneously unset using
`anariUnsetAllParameters`, which returns the object back to a state as if no
parameters had been set at all. Just like with unsetting individual parameters,
changes made by `anariUnsetAllParameters` must only be applied when the object
is committed.

The signature to `anariUnsetAllParameters` is as follows

[source,cpp]
----
void anariUnsetParameter(ANARIDevice, ANARIObject);
----

.Data types.
[cols="<26,<29,<39",options="header,unbreakable"]
|===================================================================================================
include::type_table.txt[]
|===================================================================================================

Floating point number (data types with `FLOAT`) layout and behaviour are as specified in <<ieee-754>>.

[[color]]
==== Color

The following data types must be accepted by geometry's `color` attribute
parameter and by <<object_types_sampler, samplers>>, which are grouped here for
brevity:

* `UFIXED8`
* `UFIXED8_VEC2`
* `UFIXED8_VEC3`
* `UFIXED8_VEC4`
* `UFIXED16`
* `UFIXED16_VEC2`
* `UFIXED16_VEC3`
* `UFIXED16_VEC4`
* `UFIXED32`
* `UFIXED32_VEC2`
* `UFIXED32_VEC3`
* `UFIXED32_VEC4`
* `FLOAT32`
* `FLOAT32_VEC2`
* `FLOAT32_VEC3`
* `FLOAT32_VEC4`
* `UFIXED8_RGBA_SRGB`
* `UFIXED8_RGB_SRGB`
* `UFIXED8_RA_SRGB`
* `UFIXED8_R_SRGB`


[[api_concepts_introspection]]
=== Object Introspection

ANARI supports introspection of objects, i.e., querying supported extensions, object
subtypes and information about their parameters, which is particularly useful
to enumerate and inspect implementation-specific object extensions. The intended
use is to allow for building a graphical user interface for, e.g., specific
renderers or materials, and to provide hints for the debug layer to aid in
validating extensions.

The information queried with the following functions
is static and will reflect what the implementation is capable of supporting.
If a extension is unavailable for runtime dependent reasons, for example due to
missing hardware support, the device may still advertise the associated parameters
and object subtypes. The dynamic runtime extension availability can be queried using
<<api_concepts_object_properties, properties>>.

[[anariGetDeviceSubtypes]]
Device subtypes and their implemented extensions can be queried
from a library before instantiating a device. Object and parameter specific
information can be queried from an instantiated device object.

[source,cpp]
----
const char **anariGetDeviceSubtypes(ANARILibrary);
----

A list of device subtypes implemented in a library is retrieved by calling
`anariGetDeviceSubtypes`. It returns `NULL` if there are no devices, or a
`NULL`-terminated list of `0`-terminated C-strings with the names of the
devices. The first (if any) device is the default device.

[[anariGetDeviceExtensions]]
[source,cpp]
----
const char **anariGetDeviceExtensions(ANARILibrary, const char *deviceSubtype);
----

The list extensions implemented by a device is retrieved by calling
`anariGetDeviceExtensions` with a device subtype returned by
`anariGetDeviceSubtypes`. It returns a `NULL`-terminated list of `0`-terminated
C-strings with the names of the implemented extensions.

[[anariGetObjectSubtypes]]
[source,cpp]
----
const char **anariGetObjectSubtypes(ANARIDevice, ANARIDataType objectType);
----

To enumerate the subtypes of type `objectType` supported by device
`deviceSubtype` call function `anariGetObjectSubtypes`. It returns `NULL` if
there are no subtypes, or a `NULL`-terminated list of `0`-terminated C-strings
with the names of the subtypes. The following object types are expected to have
subtypes:

* `CAMERA`
* `RENDERER`
* `INSTANCE`
* `LIGHT`
* `GEOMETRY`
* `SAMPLER`
* `MATERIAL`
* `VOLUME`
* `SPATIAL_FIELD`

[[anariGetObjectInfo]]
[source,cpp]
----
typedef struct
{
  const char *name;
  ANARIDataType type;
} ANARIParameter;

const void *anariGetObjectInfo(ANARIDevice,
    ANARIDataType objectType,
    const char *objectSubtype
    const char *infoName,
    ANARIDataType infoType);
----

An object (sub)type `objectType`/`objectSubtype` can be queried for information
with `anariGetObjectInfo` (passing `NULL` or an empty string
for `objectSubtype` to query an object type directly that does not have
subtypes). The function returns the result for `infoName` of type `infoType`, or
`NULL` if the info cannot be retrieved.
The following infos of objects can be queried:

.Info of objects for introspection.
[cols="<9,<12,^10,<38",options="header,unbreakable"]
|===================================================================================================
| Name          | Type             | Required | Description
| description   | `STRING`         |    No    | explanation of the object, e.g., for a tooltip
| parameter     | `PARAMETER_LIST` |    Yes   | list of supported parameters (array of `ANARIParameter`)
| channel       | `STRING_LIST`    | for ``FRAME`` | list of supported channels
| extension     | `STRING_LIST`    | for ``RENDERER``s | list of supported extensions
|===================================================================================================

Parameters that can be of multiple types are reported multiple times (once for
each supported variant: with the same `name`, but different `type`).

[[anariGetParameterInfo]]
[source,cpp]
----
const void *anariGetParameterInfo(ANARIDevice,
    ANARIDataType objectType,
    const char *objectSubtype,
    const char *parameterName,
    ANARIDataType parameterType,
    const char *infoName,
    ANARIDataType infoType);
----

Finally, a parameter can be inspected with `anariGetParameterInfo`,
returning the result for `infoName` of type `infoType`, or `NULL` if the
info cannot be retrieved.
The following infos of parameters can be queried:

.Info of parameters for introspection.
[cols="<10,<12,^9,<38",options="header,unbreakable"]
|===================================================================================================
| Name          | Type        | Required | Description
| description   | `STRING`    |    No    | explanation of the parameter, e.g., for a tooltip
| minimum       | type        |    No    | set values will be clamped to this minimum
| maximum       | type        |    No    | set values will be clamped to this maximum
| default       | type        |    No    | default value, must be in `minimum`..`maximum` if present
| elementType   |`DATA_TYPE_LIST`| for ``ARRAY``s | array of supported element types of the `ANARIArray` parameter, with last element `UNKNOWN`
| required      | `BOOL`      |    Yes   | whether the parameter must be set for an object to be valid,
                                        must be `FALSE` if a `default` is present
| value         |`STRING_LIST` or `DATA_TYPE_LIST` |    No    | list of accepted strings or data types for parameters that only recognize specific values
|===================================================================================================


[[api_concepts_object_properties]]
=== Object Properties

[[anariGetProperty]]
Implementations may expose object properties through the object query
interface.

[source,cpp]
----
int anariGetProperty(ANARIDevice,
    ANARIObject,
    const char *propertyName,
    ANARIDataType propertyType,
    void *memory,
    uint64_t size,
    uint32_t waitMask);
----

Properties are identified by a string name and type. The `waitMask` indicates
whether the property query will wait for the value to become available or should
return instantly.

If the property is available, the value will be written to `memory`, and the function
returns `1`. Otherwise, the value is not written to `memory`, and the return value is `0`.

The length of a string property can be queried as an `ANARI_ULONG` by appending
`.size` to the property name.

At most `size` bytes will be written to `memory`.

[NOTE]
.Note
====
Return value does not replace error handling via the callbacks.
A property may be unavailable for various reasons including not being supported
by the device, the value not being computed yet, or any other device-specific
reason. Errors related to property queries are still returned via the error
callback.
====

[[api_concepts_memory]]
=== Arrays and Memory Ownership
:array: <<api_concepts_memory, array>>

There are two methods of expressing array data on objects: directly mapping
array elements on an object parameter in order to write data elements, or
creating array objects represented by a handle.

The first method lets applications directly map a device's internally-managed
one, two, or three dimensional array data on any given object using

[[anariMapParameterArray1D]][[anariMapParameterArray2D]][[anariMapParameterArray3D]]
[source,cpp]
....
void *anariMapParameterArray1D(ANARIDevice,
    ANARIObject,
    const char *parameterName
    ANARIDataType elementType,
    uint64_t numElements,
    uint64_t *elementStride);

void *anariMapParameterArray2D(ANARIDevice,
    ANARIObject,
    const char *parameterName
    ANARIDataType elementType,
    uint64_t numElements1,
    uint64_t numElements2,
    uint64_t *elementStride);

void *anariMapParameterArray3D(ANARIDevice,
    ANARIObject,
    const char *parameterName
    ANARIDataType elementType,
    uint64_t numElements1,
    uint64_t numElements2,
    uint64_t numElements3,
    uint64_t *elementStride);
....

Each of these functions return a write-only array for the application to fill,
where the number of elements `numElementsN` must be positive (there cannot be an
empty mapped array). Whenever an array is directly mapped, any previous array
configuration (size, dimensionality, etc.) is discarded in favor of the
currently mapped array configuration.

Devices are only required to allocate directly mapped arrays for parameters
corresponding to extensions that the device implements. In cases where the
parameter is unknown by the device, the device is permitted to return `NULL`.

Devices are permitted to have a non-dense element stride, which is returned by
writing to `elementStride`. The `elementStride` argument must not be `NULL`.

[[anariUnmapParameterArray]]
Once the array has been filled, applications signal that the device is free to
consume the data with

[source,cpp]
....
void anariUnmapParameterArray(ANARIDevice, ANARIObject, const char *parameterName);
....

Directly mapped arrays behave like normal parameters in that the underlying
array data will not be used in the <<rendering_frames, next rendered frame>>
until the object itself is committed with `anariCommitParameters`. Furthermore,
using `anariUnsetParameter` will subsequently reset the parameter to an unset
state, effectively clearing the previously mapped array on the object. Using
`anariSetParameter`, `anariMapParameterArray`, or `anariUnsetParameter` on an
array that is still mapped is an error – applications must first unmap the
array before altering the parameter through other means. Writing to the mapped
pointer after calling `anariUnmapParameterArray` is undefined behavior and
should be avoided.

The second method of expressing array data on objects uses handles. `ANARIArray`
handles represent data arrays in memory, which are shared with device
implementations. The memory shared with ANARI can be either owned by the
application, have ownership transferred to the device via a deleter callback, or
be managed by the device.

[[ANARIDeleterCallback]]
The signature of the deleter is provided in `anari.h` as

[source,cpp]
....
typedef void (*ANARIDeleterCallback)(const void *userPtr, const void *appMemory);
....

[[anariNewArray1D]][[anariNewArray2D]][[anariNewArray3D]]
To create a data array, use any of the following API calls based on the
desired dimension:

[source,cpp]
....
ANARIArray1D anariNewArray1D(ANARIDevice,
   const void *appMemory,
   ANARIDeleterCallback,
   const void *userPtr,
   ANARIDataType elementType,
   uint64_t numElements);

ANARIArray2D anariNewArray2D(ANARIDevice,
   const void *appMemory,
   ANARIDeleterCallback,
   const void *userPtr,
   ANARIDataType elementType,
   uint64_t numElements1,
   uint64_t numElements2);

ANARIArray3D anariNewArray3D(ANARIDevice,
   const void *appMemory,
   ANARIDeleterCallback,
   const void *userPtr,
   ANARIDataType elementType,
   uint64_t numElements1,
   uint64_t numElements2,
   uint64_t numElements3);
....

The number of elements `numElementsN` must be positive (there cannot be an
empty array object).

In each creation function a deleter can be passed in (with an
associated pointer to any needed application data or state), which ANARI will
use to free the original pointer passed during construction. If the application
passes `NULL`, ANARI will fully rely on the application to free the memory.

When `appMemory` is not `NULL`, then the array is considered to be a _shared_
array, where both the application and device observe the same memory. Passing
`NULL` in `appMemory` creates a _managed_ array. The backing memory of the array
is managed by the device and is only writable via mapping.

Applications are permitted to release `ANARIArray` objects even if the
device still contains internal references to it. When releasing a
shared array object ANARI relinquishes shared ownership of the memory,
which may result in the creation of internal copies. When a shared array is
created with a deleter callback, it is implementation defined when an
implementation frees host memory after the array object has been released.
Deleter callbacks are never called for managed arrays.

[[anariMapArray]]
Applications are only permitted to write to the memory visible to
`ANARIArray` objects if all array objects involved are mapped. Mapping
a shared array object indicates that the device should not execute any rendering
operations (or internal state updates, such as building acceleration structures)
of any parent objects to the mapped array object which is directly referencing
mapped memory.

Array objects are mapped using

[source,cpp]
....
void *anariMapArray(ANARIDevice, ANARIArray);
....

[[anariUnmapArray]]
Mapped array objects are unmapped using

[source,cpp]
....
void anariUnmapArray(ANARIDevice, ANARIArray);
....

Mapping a shared array will always result in the same address originally used
when constructing the array object. Mapping a managed array may return a
different pointer each time it is mapped. The contents of memory mapped from
managed arrays is undefined until written to and the entire mapped range must be
specified before unmapping to avoid populating the array with undefined values.

`ANARIArray` objects containing object handles increase the ref count
of all objects in the array. Reference counts are updated on creation
of the array object and when unmapping the array.

Use of the arrays inside ANARI may cause accesses at indices derived
from parameters or other arrays (for example when drawing an indexed geometry).
Out of bounds accesses caused this way have undefined behavior.

[NOTE]
.Note
====
Array parameters of objects that are accessed by the same index (because
they represent an "array of structures") have per naming convention a
common prefix followed by a period. An example are the vertex attributes of the
<<object_types_geometry_triangle, triangle geometry>>, which all start with
`vertex.` followed by the attribute name.
====

[[extension_array1d_region]]
Arrays define a valid region of elements, which by default is always the full
capacity of the array. Implementations can allow applications to keep a singular
allocation of data, but use a parameter to tell the implementation only to use a
subset of elements. This gives applications the ability to more efficiently
change the number of elements used by parent objects at the cost of memory size
efficiency.

Implementations provide this functionality by implementing extension
`KHR_ARRAY1D_REGION`, which adds the following parameter to `ANARIArray1D`:

.<<api_concepts_parameters, Parameters>> understood by the 1D array.
[cols="<,<2,<8",options="header,unbreakable"]
|==================================================================
| Name     | Type            | Description
| region   |`UINT64_REGION1` | extension `KHR_ARRAY1D_REGION`, region of elements currently in use
|==================================================================

If `region` is not set, all elements are used as specified when the array was
constructed. When `region` is set, it is clamped to the range of the array's
constructed size respectively and warnings should be emitted by the debug layer
if `region.upper` is larger than capacity.

The values specified by `region` are clamped such that the array will always
be a valid range containing at least one element. Thus `region` is clamped
according to the following:

- `region.upper` is clamped from below by `region.lower + 1`
- `region.upper` is clamped from above by the array's capacity
- `region.lower` is clamped from above by `region.upper` - 1`

Mapping an array always returns the full capacity, regardless of the elements
specified by `region`. Object handles within `region` must always be valid.
Object arrays can be constructed with invalid handles, as long as the array
`region` contains only valid handles by the time the array is used in a render
operation.

[NOTE]
.Note
====
As with all `REGION` types, the element from `region.lower` is _inclusive_,
while `region.upper` is _exclusive_. This is intended to mimic C++ begin/end
iterators on containers.
====

[NOTE]
.Note
====
Directly mapped arrays from object parameters maximizes the device's opportunity
to be efficient in its underlying implementation. This is preferred method
applications should use to set array data on objects. However, if the array
data needs to be set on more than one object, then applications should prefer
using array objects also detailed in this section so that a single array handle
can be set on more than one parent object.
====

[[api_concepts_libraries]]
=== Libraries

ANARI libraries are the mechanism that applications use to manage API device
implementations. Libraries are solely responsible for creating instances of
<<api_concepts_devices, devices>>. Implementors may use a library to cache
data or objects which are truly global to their device implementations, such
as contexts from underlying APIs. Libraries are generally the first thing
loaded by an application and the last thing cleaned up. While libraries are
represented by an opaque handle, they are not considered an object per the
given <<api_concepts_object_definition,definition>> of an object and are thus
only usable in API calls which explicitly take `ANARILibrary` handles.

[[anariLoadLibrary]]
To load a library, use

[source,cpp]
....
ANARILibrary anariLoadLibrary(const char *name,
  ANARIStatusCallback defaultStatusCallback,
  const void *defaultStatusCallbackUserData);
....

This will look for a shared library named `anari_library_[name]`, open it,
and look for entry points for (implementation defined) initialization. The
status callback passed is used as the default value for the `statusCallback`
parameter on devices created from the returned library object. Similarly, the
user pointer passed is used as the default value for the
`statusCallbackUserData` device parameter.

[[anariUnloadLibrary]]
To unload a library (where library resource cleanup occurs), use

[source,cpp]
....
void anariUnloadLibrary(ANARILibrary);
....

It is undefined behavior to unload a library while instances of devices from
that library have not been released.

[NOTE]
.Note
====
Vendors are also permitted to implement direct device creation
functions to allow an application to directly link their ANARI library at
compile time. Please reference your vendor's documentation for whether direct
linking is supported by their ANARI library.
====

[[api_concepts_devices]]
=== Devices

ANARI coordinates the use of one or more _devices_. A device is an object
which provides the implementation of all ANARI API calls outside of libraries.
Devices represent the global state which an implementor may reuse between
different objects to render images. It is common for applications to only use
one device at a time, but the API permits concurrent use of multiple devices
to independently render from each other.

[NOTE]
.Note
====
ANARI devices are a _software_ construct. Because ANARI abstracts away the
details of an entire rendering system, the underlying hardware which a device
may use is entirely up to the implementation. Please read your vendor's device
documentation to see what parameters are available to configure and what
underlying hardware is both available and used to render frames.
====

The ANARI device is responsible for coordinating the sharing of execution
resources with the calling application, such as a CPU thread pool or GPU
kernel queues.

[[anariNewDevice]]
ANARI devices are represented by an `ANARIDevice` handle and created using

[source,cpp]
....
ANARIDevice anariNewDevice(ANARILibrary, const char *subtype);
....


Version information can be queried as properties on the `ANARIDevice`
<<api_concepts_object_properties, using `anariGetProperty`>>.

.<<api_concepts_object_properties, Properties>> queryable on a device.
[cols="<5,<3,^3,<10",options="header,unbreakable"]
|===================================================================================================
| Name               | Type        | Required | Description
| version            |`INT32`      |   Yes    | unique device version number guaranteed to increase between versions
| version.major      |`INT32`      |   No     | semantic device version major value (major.minor.patch)
| version.minor      |`INT32`      |   No     | semantic device version minor value (major.minor.patch)
| version.patch      |`INT32`      |   No     | semantic device version patch value (major.minor.patch)
| version.name       |`STRING`     |   No     | human readable device name/title
| anariVersion.major |`INT32`      |   Yes    | targeted ANARI specification version major value (major.minor.patch)
| anariVersion.minor |`INT32`      |   Yes    | targeted ANARI specification version minor value (major.minor.patch)
| anariVersion.patch |`INT32`      |   Yes    | targeted ANARI specification version patch value (major.minor.patch)
| geometryMaxIndex   |`UINT64`     |   Yes    | largest supported index into vertex arrays in <<object_types_geometry, geometries>>
| extension          |`STRING_LIST`|   Yes    | list of supported extensions
|===================================================================================================

[[api_concepts_error_handling]]
=== Error Handling

[[ANARIStatusCallback]]
Errors and other messages (warnings, validation messages, debug
information etc.) from the device are reported via a status callback.
The status callback function can be set using

[source,cpp]
....
typedef void (*ANARIStatusCallback)(const void *userPtr,
    ANARIDevice,
    ANARIObject source,
    ANARIDataType sourceType,
    ANARIStatusSeverity,
    ANARIStatusCode,
    const char *message);
....

The following values for `ANARIStatusCode` are defined:

* `STATUS_NO_ERROR`
* `STATUS_UNKNOWN_ERROR`
* `STATUS_INVALID_ARGUMENT`
* `STATUS_INVALID_OPERATION`
* `STATUS_OUT_OF_MEMORY`
* `STATUS_UNSUPPORTED_DEVICE`
* `STATUS_VERSION_MISMATCH`

The following values for `ANARIStatusSeverity` are defined:

* `SEVERITY_FATAL_ERROR`
* `SEVERITY_ERROR`
* `SEVERITY_WARNING`
* `SEVERITY_PERFORMANCE_WARNING`
* `SEVERITY_INFO`
* `SEVERITY_DEBUG`

.<<api_concepts_parameters, Parameters>> understood by all devices.
[cols="<3,<2,<5",options="header,unbreakable"]
|===================================================================================================
| Name                   | Type            | Description
| statusCallback         |`STATUS_CALLBACK`| callback used to report information to the application
| statusCallbackUserData |`VOID_POINTER`   | optional pointer passed as the first argument of the status callback
|===================================================================================================

//|logLevel |`INT` | logging level; possible values (in order of severity):
//`SEVERITY_FATAL_ERROR`. `SEVERITY_ERROR`, `SEVERITY_WARNING`,
//`SEVERITY_PERFORMANCE_WARNING`, `SEVERITY_INFO`, `SEVERITY_DEBUG`
//|logOutput|`STRING` |convenience for setting where status messages go, possible values: `stderr`, `stdout`
//|errorOutput |`STRING`|convenience for setting where error messages go, possible values: `stderr`, `stdout`


Statuses may be reported at an undefined time after the API call
causing them is made. Furthermore, these callbacks must
themselves be thread safe as they can be called on any thread.

[[api_concepts_attributes]]
=== Attributes

Attributes are quantities that are passed between objects during
rendering. Attributes are identified by strings.

Surface attributes are passed from <<Geometry, geometries>> to
<<Material, materials>> and <<Sampler, samplers>>. Attributes are either
set explicitly by user-provided data as array parameters (and may be
interpolated in a geometry-specific way) or implicitly by the surface.
Unspecified (components of) attributes default to zero for the first
three components and to one for the fourth component.

.Attributes
[cols="<,<,<3",options="header",]
|===
|Identifier |Internal Type  |Description
|`color` |`FLOAT32_VEC4` |color
|`worldPosition` |`FLOAT32_VEC4` |world space position
|`worldNormal` |`FLOAT32_VEC4` |world space shading normal
|`objectPosition` |`FLOAT32_VEC4` |object space position
|`objectNormal` |`FLOAT32_VEC4` |object space shading normal
|`attribute0` |`FLOAT32_VEC4` |generic attribute 0
|`attribute1` |`FLOAT32_VEC4` |generic attribute 1
|`attribute2` |`FLOAT32_VEC4` |generic attribute 2
|`attribute3` |`FLOAT32_VEC4` |generic attribute 3
|`primitiveId` |`UINT32` / `UINT64` |geometry specific primitive identifier, at most <<Devices, device limit `geometryMaxIndex`>> large
|===


