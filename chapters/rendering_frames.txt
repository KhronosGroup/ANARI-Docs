// Copyright 2023 The Khronos Group Inc.
// SPDX-License-Identifier: CC-BY-4.0  

[[rendering_frames]]
== Rendering Frames

[[anariRenderFrame]]
Rendering is asynchronous (non-blocking), and is done by combining a
framebuffer, renderer, camera, and world. The process of rendering a
frame is known as a _frame operation_. Frame operations are invoked
with

[source,cpp]
....
void anariRenderFrame(ANARIDevice, ANARIFrame);
....

This call may not block, and the ANARIFrame itself can be used to synchronize
with the application, cancel, or query for progress of the running task.
When `anariRenderFrame` is called, there is no guarantee when the
associated task will begin execution.

[[anariFrameReady]]
Applications can query for the status of or wait on a running frame with

[source,cpp]
....
int anariFrameReady(ANARIDevice, ANARIFrame, ANARIWaitMask);
....

If `ANARI_NO_WAIT` is passed as the wait mask, then the function returns
true if the frame has completed. Alternatively, passing `ANARI_WAIT`
will block the calling thread until the frame has completed and will
always return true.

Applications can query how long an async task ran with the `duration` property
on the `ANARIFrame`. If available, this returns the wall clock execution time
of the task in seconds. This is useful for applications to query exactly how
long an asynchronous task executed without the overhead of measuring both
task execution & synchronization by the calling application.

[NOTE]
.Note
====
The use of `anariRenderFrame` requires that all objects in the scene
being rendered are valid before rendering occurs.
====

[[anariDiscardFrame]]
Applications can signal that an in-flight frame should be cancelled if possible
using

[source,cpp]
....
void anariDiscardFrame(ANARIDevice, ANARIFrame);
....

This call is not required to block until the frame completes, rather it only
signals to the implementation to attempt cancelling the currently rendered
frame instead of going all the way to completion. The contents of a mapped
frame which has been discarded is undefined.

[[anariMapFrame]]
The application can map the given channel of a frame – and thus
access the stored pixel information – via

[source,cpp]
....
const void *anariMapFrame(ANARIDevice,
                          ANARIFrame,
                          const char *channel,
                          uint32_t *width,
                          uint32_t *height,
                          ANARIDataType *pixelType);
....

Only channels that have been set as parameters to the frame can be
mapped, the type of the pixels matches the corresponding parameter
value. The arguments `width`, `height`, and `pixelType` are output parameters
for the application to validate the exact dimensions and per-pixel data type in
the mapped image.

[NOTE]
.Note
====
ANARI makes a clear distinction between the _external_ format of channels of the
frame and the internal one: The external format is the format the user specifies
as `DATA_TYPE` parameter for channels, which corresponds to the element type of
the returned buffer when calling `anariMapFrame`. Implementations may do
significant amounts of reformatting, compression/decompression, {ldots},
in-between the generation of the _internal_ frame and the mapping of the
externally visible one.
====

The origin of the screen coordinate system in ANARI is the lower left corner
(as in OpenGL), thus the first pixel addressed by the returned pointer is the
lower left pixel of the image.

[[anariUnmapFrame]]
A previously mapped channel of a frame can be unmapped calling

[source,cpp]
....
void anariUnmapFrame(ANARIDevice, ANARIFrame, const char *channel);
....
